<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Tower of Babel</title>
  <subtitle>巴别塔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-30T14:36:20.280Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Niklaus.chi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用技术网站及工具文档传送门</title>
    <link href="http://yoursite.com/2017/08/29/%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF%E7%BD%91%E7%AB%99%E5%8F%8A%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3%E4%BC%A0%E9%80%81%E9%97%A8/"/>
    <id>http://yoursite.com/2017/08/29/常用技术网站及工具文档传送门/</id>
    <published>2017-08-29T14:05:42.000Z</published>
    <updated>2017-12-30T14:36:20.280Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_084.jpg" alt=""></p>
<a id="more"></a>
<h2 id="IT资讯"><a href="#IT资讯" class="headerlink" title="IT资讯"></a>IT资讯</h2><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CSDN</td>
<td style="text-align:left"><a href="http://www.csdn.net/" target="_blank" rel="external">http://www.csdn.net/</a></td>
</tr>
<tr>
<td style="text-align:left">51CTO</td>
<td style="text-align:left"><a href="http://www.51cto.com/" target="_blank" rel="external">http://www.51cto.com/</a></td>
</tr>
<tr>
<td style="text-align:left">开源中国社区</td>
<td style="text-align:left"><a href="https://www.oschina.net/" target="_blank" rel="external">https://www.oschina.net/</a></td>
</tr>
</tbody>
</table>
<h2 id="技术网站"><a href="#技术网站" class="headerlink" title="技术网站"></a>技术网站</h2><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">掘金</td>
<td style="text-align:left"><a href="https://juejin.im/" target="_blank" rel="external">https://juejin.im/</a></td>
</tr>
<tr>
<td style="text-align:left">ITeye</td>
<td style="text-align:left"><a href="http://www.iteye.com/" target="_blank" rel="external">http://www.iteye.com/</a></td>
</tr>
<tr>
<td style="text-align:left">博客园</td>
<td style="text-align:left"><a href="https://www.cnblogs.com/" target="_blank" rel="external">https://www.cnblogs.com/</a></td>
</tr>
<tr>
<td style="text-align:left">并发编程网</td>
<td style="text-align:left"><a href="http://ifeve.com/" target="_blank" rel="external">http://ifeve.com/</a></td>
</tr>
<tr>
<td style="text-align:left">ImportNew</td>
<td style="text-align:left"><a href="http://www.importnew.com/" target="_blank" rel="external">http://www.importnew.com/</a></td>
</tr>
<tr>
<td style="text-align:left">segmentfault</td>
<td style="text-align:left"><a href="https://segmentfault.com/" target="_blank" rel="external">https://segmentfault.com/</a></td>
</tr>
<tr>
<td style="text-align:left">IBM developerWorks</td>
<td style="text-align:left"><a href="https://www.ibm.com/developerworks/cn/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/</a></td>
</tr>
</tbody>
</table>
<h2 id="收藏博客"><a href="#收藏博客" class="headerlink" title="收藏博客"></a>收藏博客</h2><table>
<thead>
<tr>
<th style="text-align:left">博主名字</th>
<th style="text-align:left">地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">李震</td>
<td style="text-align:left"><a href="http://dyingbleed.com/" target="_blank" rel="external">http://dyingbleed.com/</a></td>
</tr>
<tr>
<td style="text-align:left">yeasy</td>
<td style="text-align:left"><a href="https://www.gitbook.com/@yeasy" target="_blank" rel="external">https://www.gitbook.com/@yeasy</a></td>
</tr>
<tr>
<td style="text-align:left">刘正阳</td>
<td style="text-align:left"><a href="https://liuzhengyang.github.io/" target="_blank" rel="external">https://liuzhengyang.github.io/</a></td>
</tr>
<tr>
<td style="text-align:left">v_JULY_v</td>
<td style="text-align:left"><a href="http://blog.csdn.net/v_july_v" target="_blank" rel="external">http://blog.csdn.net/v_july_v</a></td>
</tr>
<tr>
<td style="text-align:left">程序猿DD</td>
<td style="text-align:left"><a href="http://blog.didispace.com/" target="_blank" rel="external">http://blog.didispace.com/</a></td>
</tr>
<tr>
<td style="text-align:left">真实的归宿</td>
<td style="text-align:left"><a href="http://blog.csdn.net/hguisu" target="_blank" rel="external">http://blog.csdn.net/hguisu</a></td>
</tr>
<tr>
<td style="text-align:left">程序媛想事儿</td>
<td style="text-align:left"><a href="http://blog.csdn.net/lanxuezaipiao" target="_blank" rel="external">http://blog.csdn.net/lanxuezaipiao</a></td>
</tr>
<tr>
<td style="text-align:left">MoreWindows</td>
<td style="text-align:left"><a href="http://blog.csdn.net/morewindows" target="_blank" rel="external">http://blog.csdn.net/morewindows</a></td>
</tr>
<tr>
<td style="text-align:left">泥瓦匠BYSocket</td>
<td style="text-align:left"><a href="http://www.bysocket.com/" target="_blank" rel="external">http://www.bysocket.com/</a></td>
</tr>
<tr>
<td style="text-align:left">SherryWang0622</td>
<td style="text-align:left"><a href="http://blog.csdn.net/supersnow0622" target="_blank" rel="external">http://blog.csdn.net/supersnow0622</a></td>
</tr>
</tbody>
</table>
<h2 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h2><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">码市</td>
<td style="text-align:left"><a href="https://mart.coding.net/" target="_blank" rel="external">https://mart.coding.net/</a></td>
</tr>
<tr>
<td style="text-align:left">马克飞象</td>
<td style="text-align:left"><a href="https://maxiang.io/" target="_blank" rel="external">https://maxiang.io/</a></td>
</tr>
<tr>
<td style="text-align:left">ProcessOn</td>
<td style="text-align:left"><a href="https://www.processon.com/" target="_blank" rel="external">https://www.processon.com/</a></td>
</tr>
<tr>
<td style="text-align:left">闹钟AeroTimer</td>
<td style="text-align:left"><a href="http://aerotimer.com/" target="_blank" rel="external">http://aerotimer.com/</a></td>
</tr>
<tr>
<td style="text-align:left">七牛开发者平台</td>
<td style="text-align:left"><a href="https://portal.qiniu.com/signin" target="_blank" rel="external">https://portal.qiniu.com/signin</a></td>
</tr>
<tr>
<td style="text-align:left">MVN Repository</td>
<td style="text-align:left"><a href="https://mvnrepository.com/" target="_blank" rel="external">https://mvnrepository.com/</a></td>
</tr>
<tr>
<td style="text-align:left">Amazon WebService</td>
<td style="text-align:left"><a href="https://aws.amazon.com/cn/" target="_blank" rel="external">https://aws.amazon.com/cn/</a></td>
</tr>
</tbody>
</table>
<h2 id="官方技术文档"><a href="#官方技术文档" class="headerlink" title="官方技术文档"></a>官方技术文档</h2><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Apache Hadoop</td>
<td style="text-align:left"><a href="http://hadoop.apache.org/" target="_blank" rel="external">http://hadoop.apache.org/</a></td>
</tr>
<tr>
<td style="text-align:left">Apache Log4j 2</td>
<td style="text-align:left"><a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="external">https://logging.apache.org/log4j/2.x/</a></td>
</tr>
<tr>
<td style="text-align:left">Apache ZooKeeper</td>
<td style="text-align:left"><a href="https://zookeeper.apache.org/" target="_blank" rel="external">https://zookeeper.apache.org/</a></td>
</tr>
<tr>
<td style="text-align:left">Docker</td>
<td style="text-align:left"><a href="https://docs.docker.com/" target="_blank" rel="external">https://docs.docker.com/</a></td>
</tr>
<tr>
<td style="text-align:left">Dubbo</td>
<td style="text-align:left"><a href="http://dubbo.io/" target="_blank" rel="external">http://dubbo.io/</a></td>
</tr>
<tr>
<td style="text-align:left">Echarts</td>
<td style="text-align:left"><a href="http://echarts.baidu.com/index.html" target="_blank" rel="external">http://echarts.baidu.com/index.html</a></td>
</tr>
<tr>
<td style="text-align:left">Editor.md</td>
<td style="text-align:left"><a href="https://pandao.github.io/editor.md/" target="_blank" rel="external">https://pandao.github.io/editor.md/</a></td>
</tr>
<tr>
<td style="text-align:left">Elasticsearch</td>
<td style="text-align:left"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></td>
</tr>
<tr>
<td style="text-align:left">FreeMarker</td>
<td style="text-align:left"><a href="https://www.zheng-hang.com/chm/freemarker2_3_24/toc.html" target="_blank" rel="external">https://www.zheng-hang.com/chm/freemarker2_3_24/toc.html</a></td>
</tr>
<tr>
<td style="text-align:left">Git</td>
<td style="text-align:left"><a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a></td>
</tr>
<tr>
<td style="text-align:left">memcached</td>
<td style="text-align:left"><a href="https://github.com/memcached/memcached/wiki" target="_blank" rel="external">https://github.com/memcached/memcached/wiki</a></td>
</tr>
<tr>
<td style="text-align:left">MongoDB</td>
<td style="text-align:left"><a href="http://docs.mongoing.com/manual-zh/" target="_blank" rel="external">http://docs.mongoing.com/manual-zh/</a></td>
</tr>
<tr>
<td style="text-align:left">Mybatis</td>
<td style="text-align:left"><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="external">http://www.mybatis.org/mybatis-3/zh/index.html</a></td>
</tr>
<tr>
<td style="text-align:left">RabbitMQ</td>
<td style="text-align:left"><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="external">https://www.rabbitmq.com/getstarted.html</a></td>
</tr>
<tr>
<td style="text-align:left">Scrapy</td>
<td style="text-align:left"><a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/index.html" target="_blank" rel="external">http://scrapy-chs.readthedocs.io/zh_CN/1.0/index.html</a></td>
</tr>
<tr>
<td style="text-align:left">Spring</td>
<td style="text-align:left"><a href="https://spring.io/docs/reference" target="_blank" rel="external">https://spring.io/docs/reference</a></td>
</tr>
<tr>
<td style="text-align:left">Spring Boot</td>
<td style="text-align:left"><a href="https://projects.spring.io/spring-boot/" target="_blank" rel="external">https://projects.spring.io/spring-boot/</a></td>
</tr>
<tr>
<td style="text-align:left">Spring Cloud</td>
<td style="text-align:left"><a href="https://springcloud.cc/" target="_blank" rel="external">https://springcloud.cc/</a></td>
</tr>
<tr>
<td style="text-align:left">Storm</td>
<td style="text-align:left"><a href="http://storm.apachecn.org/releases/cn/1.1.0/index.html" target="_blank" rel="external">http://storm.apachecn.org/releases/cn/1.1.0/index.html</a></td>
</tr>
<tr>
<td style="text-align:left">wangEditor3</td>
<td style="text-align:left"><a href="https://www.kancloud.cn/wangfupeng/wangeditor3/332599" target="_blank" rel="external">https://www.kancloud.cn/wangfupeng/wangeditor3/332599</a></td>
</tr>
</tbody>
</table>
<h2 id="大厂资源链接"><a href="#大厂资源链接" class="headerlink" title="大厂资源链接"></a>大厂资源链接</h2><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">百度EFE（Excellent FrontEnd）</td>
<td style="text-align:left"><a href="http://efe.baidu.com/" target="_blank" rel="external">http://efe.baidu.com/</a></td>
</tr>
<tr>
<td style="text-align:left">百度Web前端研发部FEX</td>
<td style="text-align:left"><a href="http://fex.baidu.com/" target="_blank" rel="external">http://fex.baidu.com/</a></td>
</tr>
<tr>
<td style="text-align:left">百度企业产品用户体验中心</td>
<td style="text-align:left"><a href="http://eux.baidu.com/" target="_blank" rel="external">http://eux.baidu.com/</a></td>
</tr>
<tr>
<td style="text-align:left">阿里中间件团队博客</td>
<td style="text-align:left"><a href="http://jm.taobao.org/" target="_blank" rel="external">http://jm.taobao.org/</a></td>
</tr>
<tr>
<td style="text-align:left">阿里聚安全</td>
<td style="text-align:left"><a href="https://jaq.alibaba.com/community/index.htm" target="_blank" rel="external">https://jaq.alibaba.com/community/index.htm</a></td>
</tr>
<tr>
<td style="text-align:left">阿里用户体验设计部UED</td>
<td style="text-align:left"><a href="http://www.aliued.cn/" target="_blank" rel="external">http://www.aliued.cn/</a></td>
</tr>
<tr>
<td style="text-align:left">阿里云栖社区</td>
<td style="text-align:left"><a href="https://yq.aliyun.com/" target="_blank" rel="external">https://yq.aliyun.com/</a></td>
</tr>
<tr>
<td style="text-align:left">阿里云</td>
<td style="text-align:left"><a href="https://www.aliyun.com" target="_blank" rel="external">https://www.aliyun.com</a></td>
</tr>
<tr>
<td style="text-align:left">阿里淘宝前端团队（FED）</td>
<td style="text-align:left"><a href="http://taobaofed.org/" target="_blank" rel="external">http://taobaofed.org/</a></td>
</tr>
<tr>
<td style="text-align:left">腾讯前端IMWEB团队</td>
<td style="text-align:left"><a href="http://imweb.github.io/" target="_blank" rel="external">http://imweb.github.io/</a></td>
</tr>
<tr>
<td style="text-align:left">腾讯全端AlloyTeam团队</td>
<td style="text-align:left"><a href="http://www.alloyteam.com/" target="_blank" rel="external">http://www.alloyteam.com/</a></td>
</tr>
<tr>
<td style="text-align:left">腾讯ISUX-社交用户体验设计</td>
<td style="text-align:left"><a href="http://isux.tencent.com/" target="_blank" rel="external">http://isux.tencent.com/</a></td>
</tr>
<tr>
<td style="text-align:left">腾讯MXD移动互联网设计中心</td>
<td style="text-align:left"><a href="http://mxd.tencent.com/" target="_blank" rel="external">http://mxd.tencent.com/</a></td>
</tr>
<tr>
<td style="text-align:left">腾讯CDC</td>
<td style="text-align:left"><a href="http://cdc.tencent.com/" target="_blank" rel="external">http://cdc.tencent.com/</a></td>
</tr>
<tr>
<td style="text-align:left">腾讯游戏官方设计团队TGideas</td>
<td style="text-align:left"><a href="http://tgideas.qq.com/" target="_blank" rel="external">http://tgideas.qq.com/</a></td>
</tr>
<tr>
<td style="text-align:left">腾讯游戏DBA团队</td>
<td style="text-align:left"><a href="http://tencentdba.com/" target="_blank" rel="external">http://tencentdba.com/</a></td>
</tr>
<tr>
<td style="text-align:left">腾讯财付通设计中心TID</td>
<td style="text-align:left"><a href="http://tid.tenpay.com/" target="_blank" rel="external">http://tid.tenpay.com/</a></td>
</tr>
<tr>
<td style="text-align:left">腾讯云</td>
<td style="text-align:left"><a href="https://cloud.tencent.com/community" target="_blank" rel="external">https://cloud.tencent.com/community</a></td>
</tr>
<tr>
<td style="text-align:left"><img src="https://tech.meituan.com/favicon.ico" alt=""> 美团点评技术团队</td>
<td style="text-align:left"><a href="https://tech.meituan.com/" target="_blank" rel="external">https://tech.meituan.com/</a></td>
</tr>
<tr>
<td style="text-align:left">携程设计委员会</td>
<td style="text-align:left"><a href="http://ued.ctrip.com/blog/" target="_blank" rel="external">http://ued.ctrip.com/blog/</a></td>
</tr>
<tr>
<td style="text-align:left">京东设计中心JDC</td>
<td style="text-align:left"><a href="http://jdc.jd.com/" target="_blank" rel="external">http://jdc.jd.com/</a></td>
</tr>
<tr>
<td style="text-align:left">京东前端凹凸实验室</td>
<td style="text-align:left"><a href="https://aotu.io/index.html" target="_blank" rel="external">https://aotu.io/index.html</a></td>
</tr>
<tr>
<td style="text-align:left">360前端团队-奇舞团</td>
<td style="text-align:left"><a href="https://75team.com/" target="_blank" rel="external">https://75team.com/</a></td>
</tr>
<tr>
<td style="text-align:left">360技术博客</td>
<td style="text-align:left"><a href="http://blogs.360.cn/" target="_blank" rel="external">http://blogs.360.cn/</a></td>
</tr>
<tr>
<td style="text-align:left">360用户体验设计中心UXC</td>
<td style="text-align:left"><a href="http://uxc.360.cn/" target="_blank" rel="external">http://uxc.360.cn/</a></td>
</tr>
<tr>
<td style="text-align:left">网易用户体验中心UEDC</td>
<td style="text-align:left"><a href="http://uedc.163.com/" target="_blank" rel="external">http://uedc.163.com/</a></td>
</tr>
<tr>
<td style="text-align:left">搜狐畅游视觉设计中心</td>
<td style="text-align:left"><a href="http://vc.changyou.com/index.shtml" target="_blank" rel="external">http://vc.changyou.com/index.shtml</a></td>
</tr>
<tr>
<td style="text-align:left">七牛云</td>
<td style="text-align:left"><a href="http://blog.qiniu.com/" target="_blank" rel="external">http://blog.qiniu.com/</a></td>
</tr>
<tr>
<td style="text-align:left">Glow技术团队博客</td>
<td style="text-align:left"><a href="http://tech.glowing.com/cn/" target="_blank" rel="external">http://tech.glowing.com/cn/</a></td>
</tr>
</tbody>
</table>
<h2 id="GitHub组织"><a href="#GitHub组织" class="headerlink" title="GitHub组织"></a>GitHub组织</h2><table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Apache</td>
<td style="text-align:left"><a href="https://github.com/apache" target="_blank" rel="external">https://github.com/apache</a></td>
</tr>
<tr>
<td style="text-align:left">Java EE</td>
<td style="text-align:left"><a href="https://github.com/javaee/" target="_blank" rel="external">https://github.com/javaee/</a></td>
</tr>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left"><a href="https://github.com/oracle" target="_blank" rel="external">https://github.com/oracle</a></td>
</tr>
<tr>
<td style="text-align:left">Facebook</td>
<td style="text-align:left"><a href="https://github.com/facebook" target="_blank" rel="external">https://github.com/facebook</a></td>
</tr>
<tr>
<td style="text-align:left">Twitter</td>
<td style="text-align:left"><a href="https://github.com/twitter" target="_blank" rel="external">https://github.com/twitter</a></td>
</tr>
<tr>
<td style="text-align:left">elastic</td>
<td style="text-align:left"><a href="https://github.com/elastic" target="_blank" rel="external">https://github.com/elastic</a></td>
</tr>
<tr>
<td style="text-align:left">memcached</td>
<td style="text-align:left"><a href="https://github.com/memcached" target="_blank" rel="external">https://github.com/memcached</a></td>
</tr>
<tr>
<td style="text-align:left">Alibaba</td>
<td style="text-align:left"><a href="https://github.com/alibaba" target="_blank" rel="external">https://github.com/alibaba</a></td>
</tr>
<tr>
<td style="text-align:left">Taobao</td>
<td style="text-align:left"><a href="https://github.com/taobao" target="_blank" rel="external">https://github.com/taobao</a></td>
</tr>
<tr>
<td style="text-align:left">Tencent</td>
<td style="text-align:left"><a href="https://github.com/Tencent" target="_blank" rel="external">https://github.com/Tencent</a></td>
</tr>
<tr>
<td style="text-align:left">腾讯云</td>
<td style="text-align:left"><a href="https://github.com/tencentyun" target="_blank" rel="external">https://github.com/tencentyun</a></td>
</tr>
<tr>
<td style="text-align:left">WePayUI</td>
<td style="text-align:left"><a href="https://github.com/wepayui" target="_blank" rel="external">https://github.com/wepayui</a></td>
</tr>
<tr>
<td style="text-align:left">美团点评</td>
<td style="text-align:left"><a href="https://github.com/meituan-dianping" target="_blank" rel="external">https://github.com/meituan-dianping</a></td>
</tr>
<tr>
<td style="text-align:left">YY</td>
<td style="text-align:left"><a href="https://github.com/YYOpenSource" target="_blank" rel="external">https://github.com/YYOpenSource</a></td>
</tr>
<tr>
<td style="text-align:left">shadowsocks</td>
<td style="text-align:left"><a href="https://github.com/shadowsocks" target="_blank" rel="external">https://github.com/shadowsocks</a></td>
</tr>
<tr>
<td style="text-align:left">OnePlus</td>
<td style="text-align:left"><a href="https://github.com/OnePlusOSS" target="_blank" rel="external">https://github.com/OnePlusOSS</a></td>
</tr>
</tbody>
</table>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2017-08-29</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_content_000_000_084.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VPN搭建:亚马逊EC2+Shadowsocks</title>
    <link href="http://yoursite.com/2017/08/16/VPN%E6%90%AD%E5%BB%BA-%E4%BA%9A%E9%A9%AC%E9%80%8AEC2-Shadowsocks/"/>
    <id>http://yoursite.com/2017/08/16/VPN搭建-亚马逊EC2-Shadowsocks/</id>
    <published>2017-08-16T13:04:12.000Z</published>
    <updated>2017-08-16T13:12:21.086Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_025.png" alt=""><br><a id="more"></a></p>
<h2 id="创建ec2实例"><a href="#创建ec2实例" class="headerlink" title="创建ec2实例"></a>创建ec2实例</h2><p>具体创建过程不再赘述，下面贴出一张创建成果之后的示例图：</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_078.png" alt="实例"></p>
<h2 id="SSH登录ec2实例"><a href="#SSH登录ec2实例" class="headerlink" title="SSH登录ec2实例"></a>SSH登录ec2实例</h2><p>一般我们通过PuTTY或者Xshell远程连接ec2实例，下面具体介绍一下方法</p>
<h3 id="PuTTY"><a href="#PuTTY" class="headerlink" title="PuTTY"></a>PuTTY</h3><p>此处不再详细解释，具体请参考AWS官方文档 <a href="http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html" target="_blank" rel="external">使用 PuTTY 从 Windows 连接到 Linux 实例</a></p>
<h3 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h3><p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_079.png" alt="Xshell_1"></p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_080.png" alt="Xshell_1"></p>
<h2 id="具体配置步骤"><a href="#具体配置步骤" class="headerlink" title="具体配置步骤"></a>具体配置步骤</h2><p>以下命令均在最高权限用户 root 下运行,通过<code>sudo -s</code>获取超级管理员权限</p>
<h3 id="安装shadowsocks服务端"><a href="#安装shadowsocks服务端" class="headerlink" title="安装shadowsocks服务端"></a>安装shadowsocks服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get update             	// 更新apt-get</div><div class="line">apt-get install python-pip 	// 安装python包管理工具pip</div><div class="line">pip install shadowsocks     // 安装shadowsocks</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用Vi编辑器创建名为shadowsocks.json的配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure>
<blockquote>
<p>vi打开文件后，按<strong>i</strong>进入编辑模式</p>
</blockquote>
<p>单一端口配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;: &quot;0.0.0.0&quot;, 	       #或者为服务器ip地址</div><div class="line">    &quot;server_port&quot;: 1106, 		   #端口</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;: 1080, 			</div><div class="line">    &quot;password&quot;: &quot;123123123&quot;, 	   #连接密码</div><div class="line">    &quot;timeout&quot;: 300,</div><div class="line">    &quot;method&quot;: &quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>多端口配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    “server”:”0.0.0.0”,</div><div class="line">    “port_password”: &#123;</div><div class="line">        “端口1”: “连接密码1”,</div><div class="line">        “端口2” : “连接密码2”</div><div class="line">    &#125;,</div><div class="line">    “timeout”:300,</div><div class="line">    “method”:”aes-256-cfb”,</div><div class="line">    “fast_open”: false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>推荐一个<a href="http://tool.oschina.net/codeformat/json" target="_blank" rel="external">Json在线格式化工具</a><br>编辑完成后，按<strong>Esc</strong>键，输入<code>:wq</code>之后会保存修改并退出vi编辑器。</p>
</blockquote>
<p>在这里通过下表看一下配置文件中各项代表了什么</p>
<table>
<thead>
<tr>
<th style="text-align:left">配置项</th>
<th style="text-align:left">配置文件说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server</td>
<td style="text-align:left">服务端监听地址(IPv4或IPv6)</td>
</tr>
<tr>
<td style="text-align:left">server_port</td>
<td style="text-align:left">服务端端口，一般为443</td>
</tr>
<tr>
<td style="text-align:left">local_address</td>
<td style="text-align:left">本地监听地址，缺省为127.0.0.1</td>
</tr>
<tr>
<td style="text-align:left">local_port</td>
<td style="text-align:left">本地监听端口，一般为1080</td>
</tr>
<tr>
<td style="text-align:left">password</td>
<td style="text-align:left">用以加密的密匙</td>
</tr>
<tr>
<td style="text-align:left">timeout</td>
<td style="text-align:left">超时时间（秒）</td>
</tr>
<tr>
<td style="text-align:left">method</td>
<td style="text-align:left">加密方法，默认为aes-256-cfb，更多请查阅<a href="https://github.com/shadowsocks/shadowsocks/wiki/Encryption" target="_blank" rel="external">Encryption</a></td>
</tr>
<tr>
<td style="text-align:left">fast_open</td>
<td style="text-align:left">是否启用<a href="https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open" target="_blank" rel="external">TCP-Fast-Open</a>，true或者false</td>
</tr>
<tr>
<td style="text-align:left">workers</td>
<td style="text-align:left"><a href="https://github.com/shadowsocks/shadowsocks/wiki/Workers" target="_blank" rel="external">worker数量</a>，如果不理解含义请不要改（这个只在Unix和Linux下有用）</td>
</tr>
</tbody>
</table>
<h3 id="启动Shadowsocks服务器"><a href="#启动Shadowsocks服务器" class="headerlink" title="启动Shadowsocks服务器"></a>启动Shadowsocks服务器</h3><p>输入以下命令来启动Shadowsocks</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssserver -c /etc/shadowsocks.json -d start</div></pre></td></tr></table></figure>
<h2 id="编辑EC2入站规则"><a href="#编辑EC2入站规则" class="headerlink" title="编辑EC2入站规则"></a>编辑EC2入站规则</h2><ol>
<li><p>回到ec2控制台，右键之前创建的实例，如下图选择<strong>更改安全组</strong></p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_081.png" alt="更改安全组"></p>
</li>
<li><p>“编辑入站规则”-&gt;”添加规则”，类型为“所有ICMP-IPv4”</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_082.png" alt="添加规则"></p>
</li>
<li><p>到这里VPN服务器就搭建完毕了</p>
</li>
</ol>
<h2 id="使用Shadowsocks客户端"><a href="#使用Shadowsocks客户端" class="headerlink" title="使用Shadowsocks客户端"></a>使用Shadowsocks客户端</h2><h3 id="下载客户端"><a href="#下载客户端" class="headerlink" title="下载客户端"></a>下载客户端</h3><p>windows 客户端下载地址 ： <a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<h3 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h3><p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_083.png" alt="启动之后的Shadowsocks客户端"></p>
<blockquote>
<p>此处服务器地址应该填写<strong>公有DNS(IPv4)</strong>而不是<strong>IPv4公有IP</strong></p>
</blockquote>
<p>点击确定就可以使用</p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="external"><font color="#87CEFA">shadowsocks官网</font></a><br><a href="https://github.com/shadowsocks/shadowsocks/wiki" target="_blank" rel="external"><font color="#87CEFA">Shadowsocks的项目Wiki</font></a><br><a href="http://www.tyrion.wang/2017/02/04/VPN%E6%90%AD%E5%BB%BA-%E4%BA%9A%E9%A9%AC%E9%80%8AEC2-Shadowsocks/" target="_blank" rel="external"><font color="#87CEFA">VPN搭建:亚马逊EC2+Shadowsocks</font></a><br><a href="https://www.loyalsoldier.me/fuck-the-gfw-with-my-own-shadowsocks-server/" target="_blank" rel="external"><font color="#87CEFA">使用 Shadowsocks 自建翻墙服务器，实现全平台 100% 翻墙无障碍</font></a></p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2017-08-16</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_025.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="VPN" scheme="http://yoursite.com/tags/VPN/"/>
    
      <category term="AWS" scheme="http://yoursite.com/tags/AWS/"/>
    
      <category term="EC2" scheme="http://yoursite.com/tags/EC2/"/>
    
  </entry>
  
  <entry>
    <title>[游戏] Linux 上搭建饥荒联机版 Don&#39;t Starve Together服务器</title>
    <link href="http://yoursite.com/2017/07/15/%E6%B8%B8%E6%88%8F-Linux-%E4%B8%8A%E6%90%AD%E5%BB%BA%E9%A5%A5%E8%8D%92%E8%81%94%E6%9C%BA%E7%89%88-Don-t-Starve-Together%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2017/07/15/游戏-Linux-上搭建饥荒联机版-Don-t-Starve-Together服务器/</id>
    <published>2017-07-15T15:49:37.000Z</published>
    <updated>2017-07-18T13:42:40.051Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_015.jpg" alt=""><br><a id="more"></a></p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>Ubuntu 64位环境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libstdc++6:i386 libgcc1:i386 libcurl4-gnutls-dev:i386</div></pre></td></tr></table></figure>
<h2 id="安装SteamCMD和DST"><a href="#安装SteamCMD和DST" class="headerlink" title="安装SteamCMD和DST"></a>安装SteamCMD和DST</h2><p>下载SteamCMD：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir ~/steamcmd      </div><div class="line">cd ~/steamcmd</div><div class="line">wget http://media.steampowered.com/installer/steamcmd_linux.tar.gz</div></pre></td></tr></table></figure>
<p>解压并运行安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -xvzf steamcmd_linux.tar.gz</div><div class="line">./steamcmd.sh</div></pre></td></tr></table></figure>
<p>在 steam &gt; 模式下，登录及安装游戏包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">login anonymous                       </div><div class="line">force_install_dir ../DST</div><div class="line">app_update 343050 validate</div><div class="line">quit</div></pre></td></tr></table></figure>
<p>在上面的命令中，第一行以匿名方式登录，当然你可以登陆你自己的steamID；第二行是指定安装路径，将程序安装到steamcmd的同级目录下；第三行的343050 是Don’t Starve Together 在 Steam 平台中的 ID。</p>
<h2 id="配置Don’t-Starve-Together"><a href="#配置Don’t-Starve-Together" class="headerlink" title="配置Don’t Starve Together"></a>配置Don’t Starve Together</h2><h3 id="生成默认配置文件"><a href="#生成默认配置文件" class="headerlink" title="生成默认配置文件"></a>生成默认配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/DST/bin</div><div class="line">./dontstarve_dedicated_server_nullrenderer</div></pre></td></tr></table></figure>
<p>当看到一下提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[200] Account Failed (6): &quot;E_INVALID_TOKEN&quot;</div><div class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</div><div class="line">!!!! Your Server Will Not Start !!!!</div><div class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</div></pre></td></tr></table></figure>
<p>按Ctrl+C中断，然后完善生成的默认配置</p>
<blockquote>
<p>之前查看很多资料都是需要在~/.klei/DoNotStarveTogether路径下写配置文件，现在该路径已经更改为~/.klei/DoNotStarveTogether/Cluster_1</p>
</blockquote>
<p>依照以下文件结构新建文件夹及文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Cluster_1</div><div class="line">├── cluster.ini</div><div class="line">├── cluster_token.txt</div><div class="line">├── Caves</div><div class="line">│   ├── modoverrides.lua</div><div class="line">│   ├── server.ini</div><div class="line">│   └── worldgenoverride.lua</div><div class="line">└── Master</div><div class="line">    ├── modoverrides.lua</div><div class="line">    ├── server.ini</div><div class="line">    └── worldgenoverride.lua      #重写世界具体物品数量等参数配置</div></pre></td></tr></table></figure></p>
<h3 id="设置Token"><a href="#设置Token" class="headerlink" title="设置Token"></a>设置Token</h3><p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_033.png" alt=""></p>
<p>点击个人资料</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_034.png" alt=""></p>
<p>点击Generate Server Token的按钮，将生成游戏令牌，将该Token复制到cluster_token.txt中</p>
<h3 id="设置服务器全局变量"><a href="#设置服务器全局变量" class="headerlink" title="设置服务器全局变量"></a>设置服务器全局变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.klei/DoNotStarveTogether/Cluster_1</div><div class="line">sudo vi cluster.ini</div></pre></td></tr></table></figure>
<p>填入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[GAMEPLAY]</div><div class="line">game_mode = survival                        # Endless无尽模式；Wildern荒野模式；Survival生存模式</div><div class="line">max_players = 6                             # 最大玩家数，1-64任意一个数</div><div class="line">pvp = false                                 #</div><div class="line">pause_when_empty = true                     # 世界没人时是否自动暂停</div><div class="line">enable_snapshots = true</div><div class="line">enable_autosaver = true</div><div class="line"></div><div class="line">[NETWORK]</div><div class="line">cluster_description = Live it               # 游戏房间描述</div><div class="line">cluster_name = LiveIt007                    # 游戏名称</div><div class="line">cluster_intention = cooperative             # 游戏模式 </div><div class="line">cluster_password = 123123123                # 密码</div><div class="line"></div><div class="line">[MISC]</div><div class="line">console_enabled = true                      # 控制台</div><div class="line"></div><div class="line">[SHARD]</div><div class="line">shard_enabled = true                        # 地下世界是否启动              </div><div class="line">bind_ip = 127.0.0.1                         # 固定IP</div><div class="line">master_ip = 127.0.0.1                       # 地上世界IP</div><div class="line">master_port = 10889                         # 地上世界端口</div><div class="line">cluster_key = supersecretkey                # 地下世界连接地上世界的钥匙</div></pre></td></tr></table></figure>
<p>按ESC，输入：wq 保存并退出vi编辑器。</p>
<h3 id="设置局部配置"><a href="#设置局部配置" class="headerlink" title="设置局部配置"></a>设置局部配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.klei/DoNotStarveTogether/Cluster_1/Master</div><div class="line">sudo vi server.ini</div></pre></td></tr></table></figure>
<p>填入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[NETWORK]</div><div class="line">server_port = 11000</div><div class="line"></div><div class="line">[SHARD]</div><div class="line">is_master = true</div><div class="line"></div><div class="line">[STEAM]</div><div class="line">master_server_port = 27018</div><div class="line">authentication_port = 8768</div></pre></td></tr></table></figure>
<h3 id="设置地下世界的配置"><a href="#设置地下世界的配置" class="headerlink" title="设置地下世界的配置"></a>设置地下世界的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.klei/DoNotStarveTogether/Cluster_1/Caves</div><div class="line">sudo vi server.ini</div></pre></td></tr></table></figure>
<p>填入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[NETWORK]</div><div class="line">server_port = 11001</div><div class="line"></div><div class="line">[SHARD]</div><div class="line">is_master = false</div><div class="line">name = Caves</div><div class="line"></div><div class="line">[STEAM]</div><div class="line">master_server_port = 27019</div><div class="line">authentication_port = 8769</div></pre></td></tr></table></figure>
<h3 id="配置世界资源生成"><a href="#配置世界资源生成" class="headerlink" title="配置世界资源生成"></a>配置世界资源生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.klei/DoNotStarveTogether/Cluster_1/Caves</div><div class="line">sudo vi worldgenoverride.lua</div></pre></td></tr></table></figure>
<p>填入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">return &#123;</div><div class="line">    override_enabled = true,</div><div class="line">    preset = &quot;DST_CAVE&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><p>创建启动服务器脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/</div><div class="line">sudo vi runDST.sh</div></pre></td></tr></table></figure>
<p>填入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">steamcmd_dir=&quot;$HOME/steamcmd&quot;          </div><div class="line">install_dir=&quot;$HOME/DST&quot;          </div><div class="line">cluster_name=&quot;Cluster_1&quot;</div><div class="line">dontstarve_dir=&quot;$HOME/.klei/DoNotStarveTogether&quot;</div><div class="line"></div><div class="line">function fail()</div><div class="line">&#123;</div><div class="line">        echo Error: &quot;$@&quot; &gt;&amp;2</div><div class="line">        exit 1</div><div class="line">&#125;</div><div class="line"></div><div class="line">function check_for_file()&#123;</div><div class="line">    if [ ! -e &quot;$1&quot; ]; then</div><div class="line">            fail &quot;Missing file: $1&quot;</div><div class="line">    fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">cd &quot;$steamcmd_dir&quot; || fail &quot;Missing $steamcmd_dir directory!&quot;</div><div class="line"></div><div class="line">check_for_file &quot;$steamcmd_dir/steamcmd.sh&quot;</div><div class="line">check_for_file &quot;$dontstarve_dir/$cluster_name/cluster.ini&quot;</div><div class="line">check_for_file &quot;$dontstarve_dir/$cluster_name/cluster_token.txt&quot;</div><div class="line">check_for_file &quot;$dontstarve_dir/$cluster_name/Master/server.ini&quot;</div><div class="line">check_for_file &quot;$dontstarve_dir/$cluster_name/Caves/server.ini&quot;</div><div class="line"></div><div class="line">.~/steamcmd/steamcmd.sh +force_install_dir &quot;$install_dir&quot; +login anonymous +app_update 343050 validate +quit</div><div class="line"></div><div class="line">check_for_file &quot;$install_dir/bin&quot;</div><div class="line"></div><div class="line">cd &quot;$install_dir/bin&quot; || fail </div><div class="line"></div><div class="line">run_shared=(./dontstarve_dedicated_server_nullrenderer)</div><div class="line">run_shared+=(-console)</div><div class="line">run_shared+=(-cluster &quot;$cluster_name&quot;)</div><div class="line">run_shared+=(-monitor_parent_process $$)</div><div class="line"></div><div class="line">&quot;$&#123;run_shared[@]&#125;&quot; -shard Caves  | sed &apos;s/^/Caves:  /&apos; &amp;</div><div class="line">&quot;$&#123;run_shared[@]&#125;&quot; -shard Master | sed &apos;s/^/Master: /&apos;</div></pre></td></tr></table></figure>
<p>给脚本赋予执行权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod u+x ~/runDST.sh</div></pre></td></tr></table></figure>
<p>执行脚本，开启服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ~/runDST.sh</div></pre></td></tr></table></figure>
<p>当出现下面的日志时，说明服务器启动成功了</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_035.png" alt="success"></p>
<p>此时在客户端搜索在cluster.ini文件中配置的房间名，你就能找到你所创建的房间了</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_036.png" alt="success"></p>
<h2 id="进阶技能"><a href="#进阶技能" class="headerlink" title="进阶技能"></a>进阶技能</h2><h3 id="增加Mod"><a href="#增加Mod" class="headerlink" title="增加Mod"></a>增加Mod</h3><p>饥荒通过/DST/mods路径下的dedicated_server_mods_setup.lua文件确认需要下载那些mod。<br>首先去创意工坊找些 Mod，并获得其 id，或者找些 Mod 合集，将 Mod id 按以下形式（换行复制粘贴）保存在文件中。以下是完整文件内容</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--There are two functions that will install mods, ServerModSetup and ServerModCollectionSetup. Put the calls to the functions in this file and they will be executed on boot.</span></div><div class="line"> </div><div class="line"><span class="comment">--ServerModSetup takes a string of a specific mod's Workshop id. It will download and install the mod to your mod directory on boot.</span></div><div class="line">    <span class="comment">--The Workshop id can be found at the end of the url to the mod's Workshop page.</span></div><div class="line">    <span class="comment">--Example: http://steamcommunity.com/sharedfiles/filedetails/?id=350811795</span></div><div class="line">    <span class="comment">--ServerModSetup("350811795")</span></div><div class="line"> </div><div class="line"><span class="comment">--ServerModCollectionSetup takes a string of a specific mod's Workshop id. It will download all the mods in the collection and install them to the mod directory on boot.</span></div><div class="line">    <span class="comment">--The Workshop id can be found at the end of the url to the collection's Workshop page.</span></div><div class="line">    <span class="comment">--Example: http://steamcommunity.com/sharedfiles/filedetails/?id=379114180</span></div><div class="line">    <span class="comment">--ServerModCollectionSetup("379114180")</span></div><div class="line">     </div><div class="line">ServerModSetup(<span class="string">"345692228"</span>)   <span class="comment">--"Minimap HUD"</span></div><div class="line">ServerModSetup(<span class="string">"347079953"</span>)   <span class="comment">--"Display food values"</span></div><div class="line">ServerModSetup(<span class="string">"351325790"</span>)   <span class="comment">--"Geometric Placement"</span></div><div class="line">ServerModSetup(<span class="string">"367546858"</span>)   <span class="comment">--"Chinese Language Pack"</span></div><div class="line">ServerModSetup(<span class="string">"375850593"</span>)   <span class="comment">--"Extra Equip Slots"</span></div><div class="line">ServerModSetup(<span class="string">"375859599"</span>)   <span class="comment">--"Health Info"</span></div><div class="line">ServerModSetup(<span class="string">"376333686"</span>)   <span class="comment">--"Combined Status"</span></div><div class="line">ServerModSetup(<span class="string">"378160973"</span>)   <span class="comment">--"Global Positions"</span></div><div class="line">ServerModSetup(<span class="string">"444438334"</span>)   <span class="comment">--"DJPaul's Sort Inventory"</span></div><div class="line">ServerModSetup(<span class="string">"458587300"</span>)   <span class="comment">--"Fast Travel"</span></div><div class="line">ServerModSetup(<span class="string">"458940297"</span>)   <span class="comment">--"Food Values - Item Tooltips (Server and Client)"</span></div><div class="line">ServerModSetup(<span class="string">"462434129"</span>)   <span class="comment">--"Restart"</span></div><div class="line">ServerModSetup(<span class="string">"556027744"</span>)   <span class="comment">--"SUMMON BIGFOOT( With Old Bell)"</span></div><div class="line">ServerModSetup(<span class="string">"572538624"</span>)   <span class="comment">--"Chinese Plus"</span></div><div class="line">ServerModSetup(<span class="string">"623749604"</span>)   <span class="comment">--" Storeroom"</span></div><div class="line">ServerModSetup(<span class="string">"928706300"</span>)   <span class="comment">--"To Do Chores"</span></div><div class="line">ServerModSetup(<span class="string">"949822556"</span>)   <span class="comment">--"Egg Pain Together"</span></div><div class="line"> </div><div class="line"><span class="comment">--ServerModCollectionSetup("id")</span></div></pre></td></tr></table></figure>
<p>上面是我常用的几个Mod。但是dedicated_server_mods_setup.lua只是用于下载Mod，至于Mod是否启用以及配置则是modoverrides.lua 文件的功能。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">[<span class="string">"workshop-345692228"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-347079953"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-351325790"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-367546858"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-375850593"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-375859599"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-376333686"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-378160973"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-444438334"</span>] = &#123; enabled = <span class="literal">true</span>,</div><div class="line">    configuration_options =</div><div class="line">    &#123;</div><div class="line">        keybind = <span class="number">103</span>,</div><div class="line">        maxLights = <span class="number">2</span>,</div><div class="line">        backpackCategory = <span class="string">"food"</span></div><div class="line">    &#125;</div><div class="line">&#125;,</div><div class="line">[<span class="string">"workshop-458587300"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-458940297"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-462434129"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-556027744"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-572538624"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-623749604"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-928706300"</span>] = &#123; enabled = <span class="literal">true</span> &#125;,</div><div class="line">[<span class="string">"workshop-949822556"</span>] = &#123; enabled = <span class="literal">true</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要注意，这两个文件的Mod Id是一一对应的。同时，将modoverrides.lua分别复制到Master和Caves文件下。</p>
<h3 id="设定管理员"><a href="#设定管理员" class="headerlink" title="设定管理员"></a>设定管理员</h3><p>在~/.klei/DoNotStarveTogether/Cluster_1路径下创建adminlist.txt文件，然后将想成为管理员的玩家的用户ID一行一个写入其中。<br>获取用户ID的两种方法：</p>
<pre><code>1. 让该玩家加入游戏，再查看日志，你会在日志中找到 KU_ 开头的一串用户 id
2. 让该玩家点击游戏主页面的 Account 按钮（和获得 token 一样），在页面中会有用户 id
</code></pre><p>下面是例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">KU_3N5kE2Zp</div><div class="line">KU_BJY3CxYT</div><div class="line">KU_DF1orNGA</div><div class="line">KU_FAd2Yr8m</div><div class="line">KU_vvbUjgIX</div></pre></td></tr></table></figure>
<h3 id="用户黑名单，用户白名单"><a href="#用户黑名单，用户白名单" class="headerlink" title="用户黑名单，用户白名单"></a>用户黑名单，用户白名单</h3><p>同设定管理员操作一样，在~/.klei/DoNotStarveTogether/Cluster_1路径下分别创建blocklist.txt、whitelist.txt，然后将用户ID写入即可。</p>
<p>下面是最终的文件结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Cluster_1</div><div class="line">├── cluster.ini</div><div class="line">├── cluster_token.txt</div><div class="line">├── adminlist.txt</div><div class="line">├── blocklist.txt</div><div class="line">├── whitelist.txt</div><div class="line">├── Caves</div><div class="line">│   ├── modoverrides.lua</div><div class="line">│   ├── server.ini</div><div class="line">│   └── worldgenoverride.lua</div><div class="line">└── Master</div><div class="line">    ├── modoverrides.lua</div><div class="line">    ├── server.ini</div><div class="line">    └── worldgenoverride.lua      #重写世界具体物品数量等参数配置</div></pre></td></tr></table></figure>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="http://forums.kleientertainment.com/topic/64743-dedicated-server-command-line-options-guide/#comment-726427" target="_blank" rel="external"><font color="#87CEFA">关于启动参数的引用</font></a><br><a href="https://developer.valvesoftware.com/wiki/SteamCMD" target="_blank" rel="external"><font color="#87CEFA">SteamCMD 使用方法</font></a><br><a href="http://forums.kleientertainment.com/topic/64552-dedicated-server-settings-guide/#comment-754907" target="_blank" rel="external"><font color="#87CEFA">关于ini文件里面参数的引用</font></a><br><a href="http://forums.kleientertainment.com/topic/64441-dedicated-server-quick-setup-guide-linux/" target="_blank" rel="external"><font color="#87CEFA">官方论坛，关于linux的开服</font></a><br><a href="http://steamcommunity.com/sharedfiles/filedetails/?id=590565473" target="_blank" rel="external"><font color="#87CEFA">Klei 建议的 Don’t Strave Together Dedicated Server 搭建指南</font></a></p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2017-07-15 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_015.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="游戏" scheme="http://yoursite.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="饥荒" scheme="http://yoursite.com/tags/%E9%A5%A5%E8%8D%92/"/>
    
  </entry>
  
  <entry>
    <title>Linux下添加虚拟内存</title>
    <link href="http://yoursite.com/2017/07/15/Linux%E4%B8%8B%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <id>http://yoursite.com/2017/07/15/Linux下添加虚拟内存/</id>
    <published>2017-07-15T05:49:49.000Z</published>
    <updated>2017-07-23T05:52:11.759Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_018.jpg" alt="https://tuchong.com/1159583/14946425/"><br><a id="more"></a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为最近跟朋友在玩饥荒，刚好手里有腾讯云的1核 1GB的免费云服务器，就想着自己搭一个服务器，但是当真正配置完之后，发现如果开地穴的话1G内存并不能满足需求，要么花钱要么就采用虚拟内存的方法，将硬盘空间划过来一部分当内存。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Linux操作系统有两种实现虚拟内存的方法：交换分区(swap分区)和交换文件(swap文件)。<br>采用交换分区的办法其实就是新建一个分区，然后将该分区挂载作为交换空间，方法步骤与传统的新建分区一样。只不过格式化分区和挂载分区分别采用mkswap和swapon命令。<br>我在这里使用了交换文件的方法。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>首先我们需要查看硬盘信息和挂载信息以确定分区的大小</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo fdisk -l</div><div class="line">sudo df -Th</div></pre></td></tr></table></figure>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_041.png" alt=""></p>
<p>然后查看当前系统的内存大小</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo free -h</div></pre></td></tr></table></figure>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_042.png" alt=""></p>
<p>可以看到原来的内存大小，不足1G</p>
<p>创建swapfile文件，大小指定为2G</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dd if=/dev/zero of=/mnt/swapfile bs=1M count=2048</div></pre></td></tr></table></figure>
<blockquote>
<p>if表示input_file输入文件，of表示output_file输出文件，bs表示block_size块大小，count表示计数</p>
</blockquote>
<p>然后，格式化交换文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkswap /mnt/swapfile</div></pre></td></tr></table></figure>
<p>之后，挂载交换文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swapon /mnt/swapfile</div></pre></td></tr></table></figure>
<p>现在再查看当前系统的内存大小，如图所示，新增加了2G</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_043.png" alt=""></p>
<p>为了保证开机自动加载虚拟内存，还需要在/etc/fstab文件中加入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/mnt/swapfile swap swap defaults 0 0</div></pre></td></tr></table></figure>
<p>这样就完成了</p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="http://www.lining0806.com/linux%E4%B8%8B%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/" target="_blank" rel="external"><font color="#87CEFA">linux下如何添加虚拟内存</font></a></p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2017-07-15 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_018.jpg&quot; alt=&quot;https://tuchong.com/1159583/14946425/&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="虚拟内存" scheme="http://yoursite.com/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>[分享] Spring Boot学习资料整理</title>
    <link href="http://yoursite.com/2017/02/25/%E5%88%86%E4%BA%AB-Spring-Boot%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/02/25/分享-Spring-Boot学习资料整理/</id>
    <published>2017-02-25T14:05:42.000Z</published>
    <updated>2017-07-28T13:10:32.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_020.jpg" alt="https://mengzhonghua.tuchong.com/"><br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一段时间在自学Spring Boot的相关知识，做了一些学习笔记，在学习过程中也找到几位大神写的相当不错的Spring Boot系列学习资料，在这里整理一下，做个传送门，以便今后学习。</p>
<h2 id="《Spring-Boot基础教程》系列"><a href="#《Spring-Boot基础教程》系列" class="headerlink" title="《Spring Boot基础教程》系列"></a><a href="http://blog.didispace.com/Spring-Boot%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/" target="_blank" rel="external"><font color="#87CEFA">《Spring Boot基础教程》系列</font></a></h2><h2 id="《Spring-Boot-那些事》系列"><a href="#《Spring-Boot-那些事》系列" class="headerlink" title="《Spring Boot 那些事》系列"></a><a href="http://www.bysocket.com/?page_id=1639" target="_blank" rel="external"><font color="#87CEFA">《Spring Boot 那些事》系列</font></a></h2><h2 id="《SpringBoot非官方教程》系列"><a href="#《SpringBoot非官方教程》系列" class="headerlink" title="《SpringBoot非官方教程》系列"></a><a href="http://blog.csdn.net/column/details/15397.html" target="_blank" rel="external"><font color="#87CEFA">《SpringBoot非官方教程》系列</font></a></h2><h2 id="《Spring-Boot系列文章》系列"><a href="#《Spring-Boot系列文章》系列" class="headerlink" title="《Spring Boot系列文章》系列"></a><a href="http://www.ityouknow.com/spring-boot" target="_blank" rel="external"><font color="#87CEFA">《Spring Boot系列文章》系列</font></a></h2><h2 id="《重拾后端之Spring-Boot》系列"><a href="#《重拾后端之Spring-Boot》系列" class="headerlink" title="《重拾后端之Spring Boot》系列"></a><a href="https://github.com/wpcfan/spring-boot-tut/blob/master/README.md" target="_blank" rel="external"><font color="#87CEFA">《重拾后端之Spring Boot》系列</font></a></h2><ul>
<li>重拾后端之Spring Boot（一）：REST API的搭建可以这样简单</li>
<li>重拾后端之Spring Boot（二）：MongoDB的无缝集成</li>
<li>重拾后端之Spring Boot（三）：找回熟悉的Controller，Service</li>
<li>重拾后端之Spring Boot（四）：使用JWT和Spring Security保护REST API</li>
</ul>
<h2 id="《学习-Spring-Boot》系列"><a href="#《学习-Spring-Boot》系列" class="headerlink" title="《学习 Spring Boot》系列"></a>《学习 Spring Boot》系列</h2><ul>
<li><a href="http://dyingbleed.com/spring-boot-1/" target="_blank" rel="external"><font color="#87CEFA">学习 Spring Boot（一）：第一个 Spring Boot 应用</font></a></li>
<li><a href="http://dyingbleed.com/spring-boot-2/" target="_blank" rel="external"><font color="#87CEFA">学习 Spring Boot（二）：集成 MyBatis 和 Druid</font></a></li>
<li><a href="http://dyingbleed.com/spring-boot-3/" target="_blank" rel="external"><font color="#87CEFA">学习 Spring Boot（三）：单元测试</font></a></li>
<li><a href="http://dyingbleed.com/spring-boot-4/" target="_blank" rel="external"><font color="#87CEFA">学习 Spring Boot（四）：使用 Maven 构建 Scala 应用</font></a></li>
<li><a href="http://dyingbleed.com/spring-boot-5/" target="_blank" rel="external"><font color="#87CEFA">学习 Spring Boot（五）：日志</font></a></li>
<li><a href="http://dyingbleed.com/spring-boot-6/" target="_blank" rel="external"><font color="#87CEFA">学习 Spring Boot（六）：使用 SpringFox 生成接口文档</font></a></li>
<li><a href="http://dyingbleed.com/spring-boot-7/" target="_blank" rel="external"><font color="#87CEFA">学习 Spring Boot（七）：集成 Apache Shiro 安全框架</font></a></li>
<li><a href="http://dyingbleed.com/spring-boot-8/" target="_blank" rel="external"><font color="#87CEFA">学习 Spring Boot（八）：使用 Redis 缓存</font></a></li>
<li><a href="http://dyingbleed.com/spring-boot-9/" target="_blank" rel="external"><font color="#87CEFA">学习 Spring Boot（九）：使用 RabbitMQ 消息队列</font></a></li>
</ul>
<h2 id="单点文章"><a href="#单点文章" class="headerlink" title="单点文章"></a>单点文章</h2><ul>
<li><a href="https://www.bbsmax.com/A/MyJx8x9XJn/" target="_blank" rel="external"><font color="#87CEFA">基于Spring Boot/Spring Session/Redis的分布式Session共享解决方案</font></a></li>
</ul>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2017-02-25</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_020.jpg&quot; alt=&quot;https://mengzhonghua.tuchong.com/&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://yoursite.com/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>重新认识集合框架之HashMap</title>
    <link href="http://yoursite.com/2016/12/03/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%B9%8BHashMap/"/>
    <id>http://yoursite.com/2016/12/03/重新认识集合框架之HashMap/</id>
    <published>2016-12-03T14:40:26.000Z</published>
    <updated>2017-08-08T14:42:16.156Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_024.jpg" alt="https://tuchong.com/1646024/"><br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在官方文档中是这样描述HashMap的：</p>
<blockquote>
<p>Hash table based implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time.</p>
</blockquote>
<p>几个关键的信息：基于Map接口实现、允许null键/值、非同步、不保证有序(比如插入的顺序)、也不保证序不随时间变化。</p>
<h2 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h2><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下如所示。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_072.png" alt="hashMap内存结构图"></p>
<p>从源码可知，HashMap类中有一个非常重要的字段，就是 Node[] table，即哈希桶数组，明显它是一个Node的数组。我们来看Node[JDK1.8]是何物。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;    <span class="comment">//用来定位数组索引位置</span></div><div class="line">        <span class="keyword">final</span> K key;</div><div class="line">        V value;</div><div class="line">        Node&lt;K,V&gt; next;   <span class="comment">//链表的下一个node</span></div><div class="line"></div><div class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span></span>&#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123; ... &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Node是HashMap的一个内部类，实现了Map.Entry接口，本质是就是一个映射(键值对)。上图中的每个黑色圆点就是一个Node对象。</p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="put函数的实现"><a href="#put函数的实现" class="headerlink" title="put函数的实现"></a>put函数的实现</h3><p>HashMap的put方法执行过程可以通过下图来理解</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_073.png" alt="hashMap put方法执行流程图"></p>
<p>①. 判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；<br>②. 根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，则转向③；<br>③.判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；<br>④.判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；<br>⑤.遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；<br>⑥.插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。</p>
<p>JDK1.8HashMap的put方法源码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">     <span class="comment">// 对key的hashCode()做hash</span></div><div class="line">     <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></div><div class="line">                <span class="keyword">boolean</span> evict) &#123;</div><div class="line">     Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</div><div class="line">     <span class="comment">// 步骤①：tab为空则创建</span></div><div class="line">     <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">         n = (tab = resize()).length;</div><div class="line">     <span class="comment">// 步骤②：计算index，并对null做处理 </span></div><div class="line">     <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) </div><div class="line">         tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">     <span class="keyword">else</span> &#123;</div><div class="line">         Node&lt;K,V&gt; e; K k;</div><div class="line">         <span class="comment">// 步骤③：节点key存在，直接覆盖value</span></div><div class="line">         <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">             ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">             e = p;</div><div class="line">         <span class="comment">// 步骤④：判断该链为红黑树</span></div><div class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</div><div class="line">             e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</div><div class="line">         <span class="comment">// 步骤⑤：该链为链表</span></div><div class="line">         <span class="keyword">else</span> &#123;</div><div class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</div><div class="line">                 <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                     p.next = newNode(hash, key,value,<span class="keyword">null</span>);</div><div class="line">                        <span class="comment">//链表长度大于8转换为红黑树进行处理</span></div><div class="line">                     <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st  </span></div><div class="line">                         treeifyBin(tab, hash);</div><div class="line">                     <span class="keyword">break</span>;</div><div class="line">                 &#125;</div><div class="line">                    <span class="comment">// key已经存在直接覆盖value</span></div><div class="line">                 <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                     ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) </div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                 p = e;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         </div><div class="line">         <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></div><div class="line">             V oldValue = e.value;</div><div class="line">             <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</div><div class="line">                 e.value = value;</div><div class="line">             afterNodeAccess(e);</div><div class="line">             <span class="keyword">return</span> oldValue;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     ++modCount;</div><div class="line">     <span class="comment">// 步骤⑥：超过最大容量 就扩容</span></div><div class="line">     <span class="keyword">if</span> (++size &gt; threshold)</div><div class="line">         resize();</div><div class="line">     afterNodeInsertion(evict);</div><div class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="get函数的实现"><a href="#get函数的实现" class="headerlink" title="get函数的实现"></a>get函数的实现</h3><p>在理解了put之后，get就很简单了。大致思路如下：</p>
<ol>
<li>bucket里的第一个节点，直接命中；</li>
<li>如果有冲突，则通过key.equals(k)去查找对应的entry<br>若为树，则在树中通过key.equals(k)查找，O(logn)；<br>若为链表，则在链表中通过key.equals(k)查找，O(n)。<br>具体代码的实现如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 直接命中</span></div><div class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></div><div class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="keyword">return</span> first;</div><div class="line">        <span class="comment">// 未命中</span></div><div class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 在树中get</span></div><div class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class="line">            <span class="comment">// 在链表中get</span></div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="hash函数的实现"><a href="#hash函数的实现" class="headerlink" title="hash函数的实现"></a>hash函数的实现</h3><p>在get和put的过程中，计算下标时，先对hashCode进行hash操作，然后再通过hash值进一步计算下标，如下图所示：</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_074.png" alt="hashMap哈希算法例图"></p>
<p>在对hashCode()计算hash时具体实现是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h;</div><div class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到这个函数大概的作用就是：高16bit不变，低16bit和高16bit做了一个异或。其中代码注释是这样写的：</p>
<blockquote>
<p>Computes key.hashCode() and spreads (XORs) higher bits of hash to lower. Because the table uses power-of-two masking, sets of hashes that vary only in bits above the current mask will always collide. (Among known examples are sets of Float keys holding consecutive whole numbers in small tables.) So we apply a transform that spreads the impact of higher bits downward. There is a tradeoff between speed, utility, and quality of bit-spreading. Because many common sets of hashes are already reasonably distributed (so don’t benefit from spreading), and because we use trees to handle large sets of collisions in bins, we just XOR some shifted bits in the cheapest possible way to reduce systematic lossage, as well as to incorporate impact of the highest bits that would otherwise never be used in index calculations because of table bounds.</p>
</blockquote>
<p>在设计hash函数时，因为目前的table长度n为2的幂，而计算下标的时候，是这样实现的(使用&amp;位操作，而非%求余)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(n - <span class="number">1</span>) &amp; hash</div></pre></td></tr></table></figure>
<p>设计者认为这方法很容易发生碰撞。为什么这么说呢？不妨思考一下，在n - 1为15(0x1111)时，其实散列真正生效的只是低4bit的有效位，当然容易碰撞了。</p>
<p>因此，设计者想了一个顾全大局的方法(综合考虑了速度、作用、质量)，就是把高16bit和低16bit异或了一下。设计者还解释到因为现在大多数的hashCode的分布已经很不错了，就算是发生了碰撞也用O(logn)的tree去做了。仅仅异或一下，既减少了系统的开销，也不会造成的因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。</p>
<p>如果还是产生了频繁的碰撞，会发生什么问题呢？作者注释说，他们使用树来处理频繁的碰撞(we use trees to handle large sets of collisions in bins)，在JEP-180中，描述了这个问题：</p>
<blockquote>
<p>Improve the performance of java.util.HashMap under high hash-collision conditions by using balanced trees rather than linked lists to store map entries. Implement the same improvement in the LinkedHashMap class.</p>
</blockquote>
<p>之前已经提过，在获取HashMap的元素时，基本分两步：</p>
<ol>
<li>首先根据hashCode()做hash，然后确定bucket的index；</li>
<li>如果bucket的节点的key不是我们需要的，则通过keys.equals()在链中找。</li>
</ol>
<p>在Java 8之前的实现中是用链表解决冲突的，在产生碰撞的情况下，进行get时，两步的时间复杂度是O(1)+O(n)。因此，当碰撞很厉害的时候n很大，O(n)的速度显然是影响速度的。</p>
<p>因此在Java 8中，利用红黑树替换链表，这样复杂度就变成了O(1)+O(logn)了，这样在n很大的时候，能够比较理想的解决这个问题，在Java 8：HashMap的性能提升一文中有性能测试的结果。</p>
<h3 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h3><p>在resize的过程，简单的说就是把bucket扩充为2倍，之后重新计算index，把节点再放到新的bucket中。resize的注释是这样描述的：</p>
<blockquote>
<p>Initializes or doubles table size. If null, allocates in accord with initial capacity target held in field threshold. Otherwise, because we are using power-of-two expansion, the elements from each bin must either stay at same index, or move with a power of two offset in the new table.</p>
</blockquote>
<p>大致意思就是说，当超过限制的时候会resize，然而又因为我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。</p>
<p>怎么理解呢？例如我们从16扩展为32时，具体的变化如下所示：</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_075.png" alt="16位扩展为32位的变化"></p>
<p>因此元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_076.png" alt="16位扩展为32位的变化"></p>
<p>因此，我们在扩充HashMap的时候，不需要重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”。可以看看下图为16扩充为32的resize示意图：</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_077.png" alt="16扩充为32的resize示意图"></p>
<p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。</p>
<p>下面是代码的具体实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class="line">    <span class="comment">// 将字段引用copy到局部变量表，这样在之后的使用时可以减少getField指令的调用。</span></div><div class="line">    Node&lt;K,V&gt;[] oldTab = table;</div><div class="line">    <span class="comment">// oldCap为原数组的大小或当空时为0</span></div><div class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</div><div class="line">    <span class="keyword">int</span> oldThr = threshold;</div><div class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class="line">            threshold = Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">return</span> oldTab;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 新的数组的大小是旧数组的两倍</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class="line">                 <span class="comment">// 当旧的的数组大小大于等于默认大小时，threshold也扩大一倍。</span></div><div class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></div><div class="line">        newCap = oldThr;</div><div class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></div><div class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</div><div class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</div><div class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</div><div class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</div><div class="line">    &#125;</div><div class="line">    threshold = newThr;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</div><div class="line">    <span class="comment">// 按照新的capacity创建新数组</span></div><div class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</div><div class="line">    table = newTab;</div><div class="line">    <span class="comment">// 将原数组中的数组复制到新数组中</span></div><div class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</div><div class="line">            Node&lt;K,V&gt; e;</div><div class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</div><div class="line">                oldTab[j] = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</div><div class="line">                <span class="comment">// 如果e是该bucket唯一的一个元素，则直接赋值到新数组中。</span></div><div class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                <span class="comment">// TreeNode的情况则使用TreeNode中的split方法将这个树分成两个小树</span></div><div class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</div><div class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></div><div class="line">                    <span class="comment">// 否则则创建两个链表用来存放要放的数据，hash值&amp;oldCap为0的(即oldCap的1的位置的和hash值的同样的位置都是1，同样是基于capacity是2的次方这一前提)为low链表，反之为high链表, 通过这种方式将旧的数据分到两个链表中再放到各自对应余数的位置。</span></div><div class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                    Node&lt;K,V&gt; next;</div><div class="line">                    <span class="keyword">do</span> &#123;</div><div class="line">                        next = e.next;</div><div class="line">                        <span class="comment">// 按照e.hash值区分放在loTail后还是hiTail后</span></div><div class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</div><div class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</div><div class="line">                                loHead = e;</div><div class="line">                            <span class="keyword">else</span></div><div class="line">                                loTail.next = e;</div><div class="line">                            loTail = e;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</div><div class="line">                                hiHead = e;</div><div class="line">                            <span class="keyword">else</span></div><div class="line">                                hiTail.next = e;</div><div class="line">                            hiTail = e;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</div><div class="line">                    <span class="comment">// 处理完之后放到新数组中</span></div><div class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</div><div class="line">                        loTail.next = <span class="keyword">null</span>;</div><div class="line">                        newTab[j] = loHead;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</div><div class="line">                        hiTail.next = <span class="keyword">null</span>;</div><div class="line">                        newTab[j + oldCap] = hiHead;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newTab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><p>为什么说HashMap是线程不安全的呢？它在多线程环境下，会发生什么情况呢？</p>
<h3 id="resize死循环"><a href="#resize死循环" class="headerlink" title="resize死循环"></a>resize死循环</h3><h3 id="fail-fast"><a href="#fail-fast" class="headerlink" title="fail-fast"></a>fail-fast</h3><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="能否让-HashMap-同步？"><a href="#能否让-HashMap-同步？" class="headerlink" title="能否让 HashMap 同步？"></a>能否让 HashMap 同步？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map m = Collections.synchronizeMap(hashMap);</div></pre></td></tr></table></figure>
<h3 id="当两个对象的hashcode相同会发生什么？"><a href="#当两个对象的hashcode相同会发生什么？" class="headerlink" title="当两个对象的hashcode相同会发生什么？"></a>当两个对象的hashcode相同会发生什么？</h3><p>因为hashcode相同，所以它们的bucket位置相同，‘碰撞’会发生。因为HashMap使用链表存储对象，这个Entry(包含有键值对的Map.Entry对象)会存储在链表中。在JDK1.8中如果链表的长度超过8，将会存储在红黑树中。</p>
<h3 id="如果两个键的hashcode相同，你如何获取值对象？"><a href="#如果两个键的hashcode相同，你如何获取值对象？" class="headerlink" title="如果两个键的hashcode相同，你如何获取值对象？"></a>如果两个键的hashcode相同，你如何获取值对象？</h3><p>当我们get()方法，HashMap会使用键对象的hashcode找到bucket位置，因为对象储存在同一个bucket中，会调用keys.equals()方法去找到链表中正确的节点，最终找到要找的值对象。</p>
<h3 id="为什么String-Interger这样的wrapper类适合作为键？"><a href="#为什么String-Interger这样的wrapper类适合作为键？" class="headerlink" title="为什么String, Interger这样的wrapper类适合作为键？"></a>为什么String, Interger这样的wrapper类适合作为键？</h3><p>String, Interger这样的wrapper类作为HashMap的键是再适合不过了，而且String最为常用。因为String是不可变的，也是final的，而且已经重写了equals()和hashCode()方法了。其他的wrapper类也有这个特点。不可变性是必要的，因为为了要计算hashCode()，就要防止键值改变，如果键值在放入时和获取时返回不同的hashcode的话，那么就不能从HashMap中找到你想要的对象。不可变性还有其他的优点如线程安全。如果你可以仅仅通过将某个field声明成final就能保证hashCode是不变的，那么请这么做吧。因为获取对象的时候要用到equals()和hashCode()方法，那么键对象正确的重写这两个方法是非常重要的。如果两个不相等的对象返回不同的hashcode的话，那么碰撞的几率就会小些，这样就能提高HashMap的性能。</p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="http://blog.csdn.net/xuefeng0707/article/details/40797085" target="_blank" rel="external"><font color="#87CEFA">HashMap多线程死循环问题</font></a><br><a href="http://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external"><font color="#87CEFA">Java HashMap工作原理及实现</font></a><br><a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="external"><font color="#87CEFA">Java 8系列之重新认识HashMap</font></a><br><a href="http://www.importnew.com/22011.html" target="_blank" rel="external"><font color="#87CEFA">谈谈HashMap线程不安全的体现</font></a><br><a href="https://juejin.im/post/593e5364ac502e006c0c7690" target="_blank" rel="external"><font color="#87CEFA">HashMap、Hashtable、HashSet 和 ConcurrentHashMap 的比较</font></a> </p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-12-03</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_024.jpg&quot; alt=&quot;https://tuchong.com/1646024/&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="《重新认识集合框架》" scheme="http://yoursite.com/categories/%E3%80%8A%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E3%80%8B/"/>
    
    
      <category term="集合框架" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>[转载] Restful API 的设计规范</title>
    <link href="http://yoursite.com/2016/10/29/%E8%BD%AC%E8%BD%BD-Restful-API-%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2016/10/29/转载-Restful-API-的设计规范/</id>
    <published>2016-10-29T13:58:55.000Z</published>
    <updated>2017-08-01T23:38:34.226Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_023.jpg" alt=""><br><a id="more"></a></p>
<p>本文总结了 RESTful API 设计相关的一些原则，只覆盖了常见的场景。有些规则只是针对自己项目而言，并非其他做法都是错误的。</p>
<h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><p>URI 表示资源，资源一般对应服务器端领域模型中的实体类。</p>
<h3 id="URI规范"><a href="#URI规范" class="headerlink" title="URI规范"></a>URI规范</h3><ol>
<li>不用大写；</li>
<li>用中杠<code>-</code>不用下杠<code>_</code>；</li>
<li>参数列表要encode；</li>
<li>URI中的名词表示资源集合，使用复数形式。</li>
</ol>
<h3 id="资源集合-vs-单个资源"><a href="#资源集合-vs-单个资源" class="headerlink" title="资源集合 vs 单个资源"></a>资源集合 vs 单个资源</h3><p>URI表示资源的两种方式：资源集合、单个资源。<br>资源集合：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/zoos //所有动物园</div><div class="line">/zoos/1/animals //id为1的动物园中的所有动物</div></pre></td></tr></table></figure>
<p>单个资源：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/zoos/1 //id为1的动物园</div><div class="line">/zoos/1;2;3 //id为1，2，3的动物园</div></pre></td></tr></table></figure>
<h3 id="避免层级过深的URI"><a href="#避免层级过深的URI" class="headerlink" title="避免层级过深的URI"></a>避免层级过深的URI</h3><p><code>/</code>在url中表达层级，用于<strong>按实体关联关系进行对象导航</strong>，一般根据id导航。</p>
<p>过深的导航容易导致url膨胀，不易维护，如<code> GET /zoos/1/areas/3/animals/4</code>，尽量使用查询参数代替路径中的实体导航，如<code>GET /animals?zoo=1&amp;area=3</code>；</p>
<h3 id="对Composite资源的访问"><a href="#对Composite资源的访问" class="headerlink" title="对Composite资源的访问"></a>对Composite资源的访问</h3><p>服务器端的组合实体必须在uri中通过父实体的id导航访问。</p>
<blockquote>
<p>组合实体不是first-class的实体，它的生命周期完全依赖父实体，无法独立存在，在实现上通常是对数据库表中某些列的抽象，不直接对应表，也无id。一个常见的例子是 User — Address，Address是对User表中zipCode/country/city三个字段的简单抽象，无法独立于User存在。必须通过User索引到Address：<code>GET /user/1/addresses</code></p>
</blockquote>
<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><p>通过标准HTTP方法对资源CRUD：<br>GET：查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /zoos</div><div class="line">GET /zoos/1</div><div class="line">GET /zoos/1/employees</div></pre></td></tr></table></figure>
<p>POST：创建单个资源。<strong>POST一般向“资源集合”型uri发起</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST /animals  //新增动物</div><div class="line">POST /zoos/1/employees //为id为1的动物园雇佣员工</div></pre></td></tr></table></figure>
<p>PUT：更新单个资源（全量），客户端提供完整的更新后的资源。与之对应的是 PATCH，PATCH 负责部分更新，客户端提供要更新的那些字段。<strong>PUT/PATCH一般向“单个资源”型uri发起</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PUT /animals/1</div><div class="line">PUT /zoos/1</div></pre></td></tr></table></figure>
<p>DELETE：删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DELETE /zoos/1/employees/2</div><div class="line">DELETE /zoos/1/employees/2;4;5</div><div class="line">DELETE /zoos/1/animals  //删除id为1的动物园内的所有动物</div></pre></td></tr></table></figure>
<p>HEAD / OPTION 用的不多，就不多解释了。</p>
<h3 id="安全性和幂等性"><a href="#安全性和幂等性" class="headerlink" title="安全性和幂等性"></a>安全性和幂等性</h3><ol>
<li>安全性：不会改变资源状态，可以理解为只读的；</li>
<li>幂等性：执行1次和执行N次，对资源状态改变的效果是等价的。</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">.</th>
<th style="text-align:left">安全性</th>
<th style="text-align:left">幂等性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GET</td>
<td style="text-align:left">√</td>
<td style="text-align:left">√</td>
</tr>
<tr>
<td style="text-align:left">POST</td>
<td style="text-align:left">×</td>
<td style="text-align:left">×</td>
</tr>
<tr>
<td style="text-align:left">PUT</td>
<td style="text-align:left">×</td>
<td style="text-align:left">√</td>
</tr>
<tr>
<td style="text-align:left">DELETE</td>
<td style="text-align:left">×</td>
<td style="text-align:left">√</td>
</tr>
</tbody>
</table>
<blockquote>
<p>安全性和幂等性均不保证反复请求能拿到相同的response。以 DELETE 为例，第一次DELETE返回200表示删除成功，第二次返回404提示资源不存在，这是允许的。</p>
</blockquote>
<h3 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h3><p>查询可以捎带以下参数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">.</th>
<th style="text-align:left">示例</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">过滤条件</td>
<td style="text-align:left"><code>?type=1&amp;age=16</code></td>
<td style="text-align:left">允许一定的uri冗余，如<code>/zoos/1</code>与<code>/zoos?id=1</code></td>
</tr>
<tr>
<td style="text-align:left">排序</td>
<td style="text-align:left"><code>?sort=age,desc</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">投影</td>
<td style="text-align:left"><code>?whitelist=id,name,email</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">分页</td>
<td style="text-align:left"><code>?limit=10&amp;offset=3</code></td>
</tr>
</tbody>
</table>
<h3 id="Bookmarker"><a href="#Bookmarker" class="headerlink" title="Bookmarker"></a>Bookmarker</h3><p>经常使用的、复杂的查询标签化，降低维护成本。<br>如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /trades?status=closed&amp;sort=created,desc</div></pre></td></tr></table></figure>
<p>快捷方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /trades#recently-closed</div><div class="line">或者</div><div class="line">GET /trades/recently-closed</div></pre></td></tr></table></figure>
<h3 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h3><p>只用以下常见的3种body format：</p>
<ol>
<li><p>Content-Type: application/json</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">POST /v1/animal HTTP/1.1</div><div class="line">Host: api.example.org</div><div class="line">Accept: application/json</div><div class="line">Content-Type: application/json</div><div class="line">Content-Length: 24</div><div class="line"></div><div class="line">&#123;   </div><div class="line">  "name": "Gir",</div><div class="line">  "animalType": "12"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Content-Type: application/x-www-form-urlencoded (浏览器POST表单用的格式)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">POST /login HTTP/1.1</div><div class="line">Host: example.com</div><div class="line">Content-Length: 31</div><div class="line">Accept: text/html</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line"></div><div class="line">username=root&amp;password=Zion0101</div></pre></td></tr></table></figure>
</li>
<li><p>Content-Type: multipart/form-data; boundary=—-RANDOM_jDMUxq4Ot5 (表单有文件上传时的格式)</p>
</li>
</ol>
<h3 id="Content-Negotiation"><a href="#Content-Negotiation" class="headerlink" title="Content Negotiation"></a>Content Negotiation</h3><p>资源可以有多种表示方式，如json、xml、pdf、excel等等，客户端可以指定自己期望的格式，通常有两种方式：</p>
<ol>
<li><p>http header <code>Accept</code>：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Accept:application/xml;q=0.6,application/atom+xml;q=1.0</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>q为各项格式的偏好程度
</code></pre><ol>
<li>url中加文件后缀：<code>/zoo/1.json</code></li>
</ol>
<h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><ol>
<li><p>不要包装：</p>
<p> response 的 body 直接就是数据，不要做多余的包装。错误示例：</p>
 <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"success"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="attr">"data"</span>:&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"name"</span>:<span class="string">"xiaotuan"</span>&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>各HTTP方法成功处理后的数据格式：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">.</th>
<th style="text-align:left">response 格式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GET</td>
<td style="text-align:left">单个对象、集合</td>
</tr>
<tr>
<td style="text-align:left">POST</td>
<td style="text-align:left">新增成功的对象</td>
</tr>
<tr>
<td style="text-align:left">PUT/PATCH</td>
<td style="text-align:left">更新成功的对象</td>
</tr>
<tr>
<td style="text-align:left">DELETE</td>
<td style="text-align:left">空</td>
</tr>
</tbody>
</table>
<ol>
<li><p>json格式的约定：</p>
<ol>
<li>时间用长整形(毫秒数)，客户端自己按需解析</li>
<li>不传<code>null</code>字段</li>
</ol>
</li>
</ol>
<h3 id="分页response"><a href="#分页response" class="headerlink" title="分页response"></a>分页response</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"paging"</span>:&#123;<span class="attr">"limit"</span>:<span class="number">10</span>,<span class="attr">"offset"</span>:<span class="number">0</span>,<span class="attr">"total"</span>:<span class="number">729</span>&#125;,</div><div class="line">    <span class="attr">"data"</span>:[&#123;&#125;,&#123;&#125;,&#123;&#125;...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ol>
<li>不要发生了错误但给2xx响应，客户端可能会缓存成功的http请求；</li>
<li>正确设置http状态码，不要自定义；</li>
<li>Response body 提供 1) 错误的代码（日志/问题追查）；2) 错误的描述文本（展示给用户）。</li>
</ol>
<p>对第三点的实现稍微多说一点：<br>Java 服务器端一般用异常表示 RESTful API 的错误。API 可能抛出两类异常：业务异常和非业务异常。<strong>业务异常</strong>由自己的业务代码抛出，表示一个用例的前置条件不满足、业务规则冲突等，比如参数校验不通过、权限校验失败。<strong>非业务类异常</strong>表示不在预期内的问题，通常由类库、框架抛出，或由于自己的代码逻辑错误导致，比如数据库连接失败、空指针异常、除0错误等等。</p>
<p>业务类异常必须提供2种信息：</p>
<ol>
<li>如果抛出该类异常，HTTP 响应状态码应该设成什么；</li>
<li>异常的文本描述；</li>
</ol>
<p>在Controller层使用统一的异常拦截器：</p>
<ol>
<li>设置 HTTP 响应状态码：对业务类异常，用它指定的 HTTP code；对非业务类异常，统一500；</li>
<li>Response Body 的错误码：异常类名</li>
<li>Response Body 的错误描述：对业务类异常，用它指定的错误文本；对非业务类异常，线上可以统一文案如“服务器端错误，请稍后再试”，开发或测试环境中用异常的 stacktrace，服务器端提供该行为的开关。</li>
</ol>
<p>常用的http状态码及使用场景：</p>
<table>
<thead>
<tr>
<th style="text-align:left">状态码</th>
<th style="text-align:left">使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">400 bad request</td>
<td style="text-align:left">常用在参数校验</td>
</tr>
<tr>
<td style="text-align:left">401 unauthorized</td>
<td style="text-align:left">未经验证的用户，常见于未登录。如果经过验证后依然没权限，应该 403（即 authentication 和 authorization 的区别）。</td>
</tr>
<tr>
<td style="text-align:left">403 forbidden</td>
<td style="text-align:left">无权限</td>
</tr>
<tr>
<td style="text-align:left">404 not found</td>
<td style="text-align:left">资源不存在</td>
</tr>
<tr>
<td style="text-align:left">500 internal server error</td>
<td style="text-align:left">非业务类异常</td>
</tr>
<tr>
<td style="text-align:left">503 service unavaliable</td>
<td style="text-align:left">由容器抛出，自己的代码不要抛这个异常</td>
</tr>
</tbody>
</table>
<h2 id="服务型资源"><a href="#服务型资源" class="headerlink" title="服务型资源"></a>服务型资源</h2><p>除了资源简单的CRUD，服务器端经常还会提供其他服务，这些服务无法直接用上面提到的URI映射。如：</p>
<ol>
<li>按关键字搜索；</li>
<li>计算地球上两点间的距离；</li>
<li>批量向用户推送消息</li>
</ol>
<p>可以把这些服务看成资源，计算的结果是资源的presentation，按服务属性选择合适的HTTP方法。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET /search?q=filter?category=file  搜索</div><div class="line">GET /distance-calc?lats=47.480&amp;lngs=-122.389&amp;late=37.108&amp;lnge=-122.448</div><div class="line">POST /batch-publish-msg</div><div class="line">[&#123;&quot;from&quot;:0,&quot;to&quot;:1,&quot;text&quot;:&quot;abc&quot;&#125;,&#123;&#125;,&#123;&#125;...]</div></pre></td></tr></table></figure>
<h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>对耗时的异步任务，服务器端接受客户端传递的参数后，应返回创建成功的任务资源，其中包含了任务的执行状态。客户端可以轮训该任务获得最新的执行进度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">提交任务：</div><div class="line">POST /batch-publish-msg</div><div class="line">[&#123;&quot;from&quot;:0,&quot;to&quot;:1,&quot;text&quot;:&quot;abc&quot;&#125;,&#123;&#125;,&#123;&#125;...]</div><div class="line"></div><div class="line">返回：</div><div class="line">&#123;&quot;taskId&quot;:3,&quot;createBy&quot;:&quot;Anonymous&quot;,&quot;status&quot;:&quot;running&quot;&#125;</div><div class="line"></div><div class="line">GET /task/3</div><div class="line">&#123;&quot;taskId&quot;:3,&quot;createBy&quot;:&quot;Anonymous&quot;,&quot;status&quot;:&quot;success&quot;&#125;</div></pre></td></tr></table></figure>
<p>如果任务的执行状态包括较多信息，可以把“执行状态”抽象成组合资源，客户端查询该状态资源了解任务的执行情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">提交任务：</div><div class="line">POST /batch-publish-msg</div><div class="line">[&#123;&quot;from&quot;:0,&quot;to&quot;:1,&quot;text&quot;:&quot;abc&quot;&#125;,&#123;&#125;,&#123;&#125;...]</div><div class="line"></div><div class="line">返回：</div><div class="line">&#123;&quot;taskId&quot;:3,&quot;createBy&quot;:&quot;Anonymous&quot;&#125;</div><div class="line"></div><div class="line">GET /task/3/status</div><div class="line">&#123;&quot;progress&quot;:&quot;50%&quot;,&quot;total&quot;:18,&quot;success&quot;:8,&quot;fail&quot;:1&#125;</div></pre></td></tr></table></figure>
<h2 id="API的演进"><a href="#API的演进" class="headerlink" title="API的演进"></a>API的演进</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>常见的三种方式：</p>
<ol>
<li>在uri中放版本信息：<code>GET /v1/users/1</code></li>
<li>Accept Header：<code>Accept: application/json+v1</code></li>
<li>自定义 Header：<code>X-Api-Version: 1</code></li>
</ol>
<p>用第一种，虽然没有那么优雅，但最明显最方便。</p>
<h3 id="URI失效"><a href="#URI失效" class="headerlink" title="URI失效"></a>URI失效</h3><p>随着系统发展，总有一些API失效或者迁移，对失效的API，返回404 not found 或 410 gone；对迁移的API，返回 301 重定向。</p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p>转自– <a href="http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html" target="_blank" rel="external"><font color="#87CEFA">Restful API 的设计规范</font></a><br><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external"><font color="#87CEFA">理解RESTful架构</font></a><br><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external"><font color="#87CEFA">RESTful API 设计指南</font></a><br><a href="https://thomashunter.name/consumer-centric-api-design/Consumer-Centric%20API%20Design%20v0.3.1.pdf" target="_blank" rel="external"><font color="#87CEFA">Consumer-Centric API Design</font></a></p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-10-29</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_023.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Restful API" scheme="http://yoursite.com/tags/Restful-API/"/>
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>[面试] 面试过程中遇到的Cookie和Session的问题</title>
    <link href="http://yoursite.com/2016/10/23/%E9%9D%A2%E8%AF%95-%E9%9D%A2%E8%AF%95%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84Cookie%E5%92%8CSession%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/10/23/面试-面试过程中遇到的Cookie和Session的问题/</id>
    <published>2016-10-23T13:29:09.000Z</published>
    <updated>2017-07-31T13:43:26.321Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_022.jpg" alt="https://tuchong.com/1159583/14369308/"><br><a id="more"></a></p>
<h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><h3 id="1-说明Cookie和Session这两个概念的联系与区别，解释Session是如何工作的？"><a href="#1-说明Cookie和Session这两个概念的联系与区别，解释Session是如何工作的？" class="headerlink" title="1.说明Cookie和Session这两个概念的联系与区别，解释Session是如何工作的？"></a>1.说明Cookie和Session这两个概念的联系与区别，解释Session是如何工作的？</h3><h3 id="2-为什么要引入Cookie？Cookie通常存在哪里？"><a href="#2-为什么要引入Cookie？Cookie通常存在哪里？" class="headerlink" title="2.为什么要引入Cookie？Cookie通常存在哪里？"></a>2.为什么要引入Cookie？Cookie通常存在哪里？</h3><p>关于Cookie存储在哪里，首先要知道Cookie失效分为两种：<br>1.设置过期时间失效（只要设置了过期时间Cookie就会存储在硬盘里面）。<br>2.在会话结束时失效，即关闭浏览器窗口（因为没有设置Expires，Cookie就会存储在内存中）。<br>下面给出一个demo</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"btn1"</span> <span class="attr">onclick</span>=<span class="string">"setCookieBtn1()"</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"btn2"</span> <span class="attr">onclick</span>=<span class="string">"setCookieBtn2()"</span>&gt;</span>btn2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/resources/js/jquery-3.1.1.min.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/resources/js/jquery.cookie.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    function setCookieBtn1()&#123;</div><div class="line">        $.cookie('Memory','Memory');</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function setCookieBtn2()&#123;</div><div class="line">        $.cookie('HardDisk','HardDisk',&#123;expires:1&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>依次点击btn1、btn2之后，通过F12调出Chrome的Developer Tools查看Cookie情况</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_069.png" alt=""></p>
<p>通过Chrome 的 设置-隐私设置 -内容设置-Cookie-所有Cookie和网站数据可以查看结果如下：</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_070.png" alt=""></p>
<p>重启浏览器之后再次查看结果：</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_071.png" alt=""></p>
<p>此时名为HardDisk的Cookie存储在 C:\Users\username\AppData\Local\Google\Chrome\User Data\Default中的Cookies文件中。</p>
<h3 id="3-Session对象何时被创建？何时被销毁？"><a href="#3-Session对象何时被创建？何时被销毁？" class="headerlink" title="3.Session对象何时被创建？何时被销毁？"></a>3.Session对象何时被创建？何时被销毁？</h3><p>1.调用HttpServletRequest.getSession(true)<br>2.Session的销毁</p>
<ul>
<li>关闭浏览器</li>
<li>设置Session过期</li>
<li>服务器端调用了HttpSession的invalidate()方法。</li>
</ul>
<h3 id="4-Session通常存在哪里？是否可以持久化？"><a href="#4-Session通常存在哪里？是否可以持久化？" class="headerlink" title="4.Session通常存在哪里？是否可以持久化？"></a>4.Session通常存在哪里？是否可以持久化？</h3><h3 id="5-Session共享是什么意思？"><a href="#5-Session共享是什么意思？" class="headerlink" title="5.Session共享是什么意思？"></a>5.Session共享是什么意思？</h3><h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-10-23</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_022.jpg&quot; alt=&quot;https://tuchong.com/1159583/14369308/&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>[转载]深入理解web开发中的Session和Cookie</title>
    <link href="http://yoursite.com/2016/10/22/%E8%BD%AC%E8%BD%BD-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3web%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84Session%E5%92%8CCookie/"/>
    <id>http://yoursite.com/2016/10/22/转载-深入理解web开发中的Session和Cookie/</id>
    <published>2016-10-22T13:16:54.000Z</published>
    <updated>2017-07-31T13:54:16.339Z</updated>
    
    <content type="html"><![CDATA[<p>Session 与 Cookie 不管是对 Java Web 的初学者还是熟练使用者来说都是一个令人头疼的问题。在初入职场时恐怕很多程序员在面试的时候都被问到过这个问题。其实这个问题回答起来既简单又复杂，简单是因为它们本身只是 HTTP 协议中的一个配置项，在 Servlet 规范中也只是对应到一个类而已；说它复杂原因在于当我们的系统大到需要用到很多 Cookie 的时候，我们不得不考虑 HTTP 协议对 Cookie 数量和大小的限制，那么如何才能解决这个瓶颈呢？ Session 也会有同样的问题，当我们的一个应用系统有几百台服务器的时候如何解决 Session 在多台服务器之间共享？</p>
<p>Session 与 Cookie 的作用都是为了保持访问用户与后端服务器的交互状态。它们有各自的优点，也有各自的缺陷，然而具有讽刺意味的是它们的优点和它们的使用场景又是矛盾的。例如，使用 Cookie 来传递信息时，随着 Cookie 个数的增多和访问量的增加，它占用的网络带宽也很大，试想假如 Cookie 占用 200 个字节，如果一天的 PV 有几亿，它要占用多少带宽？所以有大访问量的时候希望用 Session，但是 Session 的致命弱点是不容易在多台服务器之间共享，所以这也限制了 Session 的使用。</p>
<a id="more"></a>
<h2 id="理解Cookie"><a href="#理解Cookie" class="headerlink" title="理解Cookie"></a>理解Cookie</h2><p>Cookie 的作用我想大家都知道，通俗地说就是当一个用户通过 HTTP 协议访问一个服务器的时候，这个服务器会将一些 Key/Value 键值对返回给客户端浏览器，并给这些数据加上一些限制条件，在条件符合时这个用户下次访问这个服务器的时候，数据又被完整地带回给服务器。</p>
<p>这个作用就像您去超市购物时，第一次给您办张购物卡，这个购物卡里存放了一些您的个人信息，下次您再来这个连锁超市时，超市会识别您的购物卡，下次直接购物就好了。</p>
<p>当初 W3C 在设计 Cookie 时实际上考虑的是为了记录用户在一段时间内访问 Web 应用的行为路径。由于 HTTP 协议是一种无状态协议，当用户的一次访问请求结束后，后端服务器就无法知道下一次来访问的还是不是上次访问的用户，在设计应用程序时，我们很容易想到两次访问是同一人访问与不同的两个人访问对程序设计和性能来说有很大的不同。例如，在一个很短的时间内，如果与用户相关的数据被频繁访问，可以针对这个数据做缓存，这样可以大大提高数据的访问性能。Cookie 的作用正是在此，由于是同一个客户端发出的请求，每次发出的请求都会带有第一次访问时服务端设置的信息，这样服务端就可以根据 Cookie 值来划分访问的用户了。</p>
<h3 id="Cookie属性项"><a href="#Cookie属性项" class="headerlink" title="Cookie属性项"></a>Cookie属性项</h3><p>当前Cookie有两个版本：Version 0和Version 1.通过他们有两种设置响应头的标识，分别是“Set-Cookie”和“Set-Cookie2”。这两个版本的属性项有些不同。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性项</th>
<th style="text-align:left">属性项介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NAME=VALUE</td>
<td style="text-align:left">键值对，可以设置要保存的 Key/Value，注意这里的 NAME 不能和其他属性项的名字一样</td>
</tr>
<tr>
<td style="text-align:left">Expires</td>
<td style="text-align:left">过期时间，在设置的某个时间点后该 Cookie 就会失效，如 expires=Wednesday, 09-Nov-99 23:12:40 GMT</td>
</tr>
<tr>
<td style="text-align:left">Domain</td>
<td style="text-align:left">生成该 Cookie 的域名，如 domain=”xulingbo.net”</td>
</tr>
<tr>
<td style="text-align:left">Path</td>
<td style="text-align:left">该 Cookie 是在当前的哪个路径下生成的，如 path=/wp-admin/</td>
</tr>
<tr>
<td style="text-align:left">Secure</td>
<td style="text-align:left">如果设置了这个属性，那么只会在 SSH 连接时才会回传该 Cookie</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">属性项</th>
<th style="text-align:left">属性项介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NAME=VALUE</td>
<td style="text-align:left">与 Version 0 相同</td>
</tr>
<tr>
<td style="text-align:left">Version</td>
<td style="text-align:left">通过 Set-Cookie2 设置的响应头创建必须符合 RFC2965 规范，如果通过 Set-Cookie 响应头设置，默认值为 0，如果要设置为 1，则该 Cookie 要遵循 RFC 2109 规范</td>
</tr>
<tr>
<td style="text-align:left">Comment</td>
<td style="text-align:left">注释项，用户说明该 Cookie 有何用途</td>
</tr>
<tr>
<td style="text-align:left">CommentURL</td>
<td style="text-align:left">服务器为此  Cookie 提供的 URI 注释</td>
</tr>
<tr>
<td style="text-align:left">Discard</td>
<td style="text-align:left">是否在会话结束后丢弃该 Cookie 项，默认为 fasle</td>
</tr>
<tr>
<td style="text-align:left">Domain</td>
<td style="text-align:left">生类似于 Version 0</td>
</tr>
<tr>
<td style="text-align:left">Max-Age</td>
<td style="text-align:left">最大失效时间，与 Version 0 不同的是这里设置的是在多少秒后失效</td>
</tr>
<tr>
<td style="text-align:left">Port</td>
<td style="text-align:left">该 Cookie 在什么端口下可以回传服务端，如果有多个端口，以逗号隔开，如 Port=”80,81,8080”</td>
</tr>
<tr>
<td style="text-align:left">Path</td>
<td style="text-align:left">类似于 Version 0</td>
</tr>
<tr>
<td style="text-align:left">Secure</td>
<td style="text-align:left">类似于 Version 0</td>
</tr>
</tbody>
</table>
<p>以上两个版本的 Cookie 中设置的 Header 头的标识符是不同的，我们常用的是 Set-Cookie：userName=“junshan”; Domain=“xulingbo.net”，这是 Version 0 的形式。针对 Set-Cookie2 是这样设置的：Set-Cookie2：userName=“junshan”; Domain=“xulingbo.net”; Max-Age=1000。但是在 Java Web 的 Servlet 规范中并不支持 Set-Cookie2 响应头，在实际应用中 Set-Cookie2 的一些属性项却可以设置在 Set-Cookie 中，如这样设置：Set-Cookie：userName=“junshan”; Version=“1”;Domain=“xulingbo.net”;Max-Age=1000。</p>
<h3 id="Cookie如何工作"><a href="#Cookie如何工作" class="headerlink" title="Cookie如何工作"></a>Cookie如何工作</h3><p>当我们用如下方式创建Cookie时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getCookie</span><span class="params">(Cookie[] cookies, String key)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123; </div><div class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123; </div><div class="line">            <span class="keyword">if</span> (cookie.getName().equals(key)) &#123; </div><div class="line">                <span class="keyword">return</span> cookie.getValue(); </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="meta">@Override</span> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> IOException, ServletException </span>&#123; </div><div class="line">    Cookie[] cookies = request.getCookies(); </div><div class="line">    String userName = getCookie(cookies, <span class="string">"userName"</span>); </div><div class="line">    String userAge = getCookie(cookies, <span class="string">"userAge"</span>); </div><div class="line">    <span class="keyword">if</span> (userName == <span class="keyword">null</span>) &#123; </div><div class="line">        response.addCookie(<span class="keyword">new</span> Cookie(<span class="string">"userName"</span>, <span class="string">"junshan"</span>)); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">if</span> (userAge == <span class="keyword">null</span>) &#123; </div><div class="line">        response.addCookie(<span class="keyword">new</span> Cookie(<span class="string">"userAge"</span>, <span class="string">"28"</span>)); </div><div class="line">    &#125; </div><div class="line">    response.getHeaders(<span class="string">"Set-Cookie"</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Cookie是如何加到HTTP的Header中的呢？当我们用Servlet 3.0规范来创建一个Cookie对象时，该Cookie既支持Version 0又支持Version 1，如果你设置了Version 1中的配置项，即使您没有设置版本号，Tomcat在最后构建HTTP响应头时也会自动将Version的版本设置为1。下面看一下Tomcat是如何调用addCookie方法。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_056.jpg" alt="Tomcat 创建 Set-Cookie 响应头的时序图"></p>
<p>从图中可以看出，真正构建Cookie是在org.apache.catalina.connector.Response类中完成的，调用generateCookieString方法将Cookie对象构建成一个字符串，构造的字符串格式如userName=“junshan”;Version=“1”; Domain=“xulingbo.net”; Max-Age=1000。然后将这个字符串命名为 Set-Cookie 添加到 MimeHeaders 中。 </p>
<p>在这里有几点需要注意：</p>
<ul>
<li>创建的Cookie的NAME不能和Set-Cookie或者Set-Cookie2的属性项值一样，如果一样会抛 IllegalArgumentException异常。</li>
<li>创建Cookie的NAME和VALUE的值不能设置成非ASSIC字符，如果要使用中文，可以通过URLEncoder 将其编码，否则将会抛 IllegalArgumentException 异常。</li>
<li>当 NAME 和 VALUE 的值出现一些 TOKEN 字符（如“\”、“,”等）时，构建返回头会将该 Cookie 的 Version 自动设置为 1。</li>
<li>当该 Cookie 的属性项中出现 Version 为 1 的属性项时，构建 HTTP 响应头同样会将 Version 设置为 1。</li>
</ul>
<p>不知道您有没有注意一个问题，就是当我们通过response.addCookie创建多个Cookie时，这些Cookie最终是在一个Header项中还是以独立的Header存在的，通俗的说也就是我们每次创建Cookie时是否都是创建一个以NAME为Set-Cookie的MineHeaders？答案是肯定的。从上面的图中可以看出每次调用addCookie的时候，最终都会创建一个Header，但是我们还不知道最终在请求返回时构造HTTP响应头是否将相同Header标识的Set-Cookie值进行合并。</p>
<p>我们找到Tomcat最终构造HTTP响应头的代码，这段代码位于org.apache.coyote.http11. Http11Processor类的prepareResponse 方法中，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> size = headers.size(); </div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123; </div><div class="line">   outputBuffer.sendHeader(headers.getName(i), headers.getValue(i)); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码清楚地表示，在构建HTTP返回字节流时是将Header终所有的项顺序地写出，而没有进行任何修改。所以可以想象浏览器在接收HTTP协议返回的数据时是分别解析每一个Header项的。</p>
<p>另外，目前很多工具都可以观察甚至可以修改浏览器中的 Cookie 数据。例如，在 Firefox 中可以通过 HttpFox 插件来查看返回的 Cookie 数据，如下图所示。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_057.jpg" alt="HttpFox 插件展示的 Header 数据"></p>
<p>在 cookie 项中可以详细查看 Cookie 属性项，如下图所示。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_058.jpg" alt="HttpFox 插件展示的 Cookie 数据"></p>
<p>前面主要介绍了服务端如何创建 Cookie，下面看一下如何从客户端获取 Cookie。</p>
<p>当我们请求某个 URL 路径时，浏览器会根据这个 URL 路径将符合条件的 Cookie 放在 Request 请求头中传回给服务端，服务端通过 request.getCookies() 来取得所有 Cookie。</p>
<h3 id="使用Cookie的限制"><a href="#使用Cookie的限制" class="headerlink" title="使用Cookie的限制"></a>使用Cookie的限制</h3><p>Cookie是HTTP协议头中的一个字段，虽然HTTP协议本身对着这个字段并没有多少限制，但是Cookie最终还是存储在浏览器里，所以不同的浏览器对Cookie的存储都有一些限制，下表是一些通常的浏览器对Cookie的大小和数量的限制。</p>
<table>
<thead>
<tr>
<th style="text-align:left">浏览器版本</th>
<th style="text-align:left">Cookie数限制</th>
<th style="text-align:left">Cookie总大小限制</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">IE6</td>
<td style="text-align:left">20 个 / 每个域名</td>
<td style="text-align:left">4095 个字节</td>
</tr>
<tr>
<td style="text-align:left">IE7</td>
<td style="text-align:left">50 个 / 每个域名</td>
<td style="text-align:left">4095 个字节</td>
</tr>
<tr>
<td style="text-align:left">IE8</td>
<td style="text-align:left">50 个 / 每个域名</td>
<td style="text-align:left">4095 个字节</td>
</tr>
<tr>
<td style="text-align:left">IE9</td>
<td style="text-align:left">50 个 / 每个域名</td>
<td style="text-align:left">4095 个字节</td>
</tr>
<tr>
<td style="text-align:left">Chrome</td>
<td style="text-align:left">50 个 / 每个域名</td>
<td style="text-align:left">大于 80000</td>
</tr>
<tr>
<td style="text-align:left">FireFox</td>
<td style="text-align:left">50 个 / 每个域名</td>
<td style="text-align:left">4095 个字节</td>
</tr>
</tbody>
</table>
<h2 id="理解Session"><a href="#理解Session" class="headerlink" title="理解Session"></a>理解Session</h2><p>前面介绍了Cookie可以让服务端程序追踪到每个客户端的访问，但是每次客户端的访问都必须传回这些Cookie，如果Cookie很多，这无形地增加了客户端与服务端的数据传输量，而Session的出现正是为了解决这个问题。</p>
<p>同一个客户端每次和服务端交互时，不需要每次都传回所有的Cookie值，而是只要传回一个ID，这个ID是客户端第一次访问服务器的时候生成的，而且每个客户端是唯一的。这样每个客户端就有了一个唯一的ID，客户端只要传回这个ID就行了，这个ID通常是NAME为JSESSIONID的一个Cookie。</p>
<h3 id="Session与Cookie"><a href="#Session与Cookie" class="headerlink" title="Session与Cookie"></a>Session与Cookie</h3><p>下面详细讲一下Session如何给予Cookie来工作。实际上有三种方式可以让Session正常工作：</p>
<ul>
<li>基于URL Path Parameter ，默认支持。</li>
<li>基于Cookie，如果没有修改Context容器的cookies标识，默认也是支持的。</li>
<li>基于SSL，默认不支持，只有connector.getAttribute(“SSLEnabled”) 为TRUE时才支持。</li>
</ul>
<p>第一种情况下，当浏览器不支持Cookie功能时，浏览器会将用户的SessionCookieName重写到用请求的URL参数中，它的传递格式如/path/Servlet;name=value;name2=value2? Name3=value3，其中“Servlet；”后面的K-V就是要传递的Path Parameters，服务器会从这个Path Parameters中拿到用户配置的SessionCookieName。关于这个SessionCookieName，如果在web.xml中配置session-config配置项，其cookie-config下的name属性就是这个SessionCookieName值。如果没有配置session-config配置项，默认的SessionCookieName就是大家熟悉的“JSESSIONID”。需要说明的一点是，与Session关联的Cookie与其他Cookie没有什么不同。接着Request根据这个SessionCookieName倒Parameters中拿到Session ID并设置到request.setRequestedSessionId中。</p>
<p>请注意，如果客户端也支持Cookie，Tomcat仍然会解析Cookie中的Session ID，并会覆盖URL中的Session ID。<br>如果是第三情况，将会根据 javax.servlet.request.ssl_session 属性值设置 Session ID。</p>
<h3 id="Session如何工作"><a href="#Session如何工作" class="headerlink" title="Session如何工作"></a>Session如何工作</h3><p>有了Session ID服务端就可以创建HttpSession对象了，第一次触发通过request.getSession()方法。如果当前的Session ID还没有对应的HttpSession对象，那么就创建一个新的，并将这个对象加到org.apache.catalina.Manager的sessions容器中保存。Manager类将管理所有Session的生命周期，Session过期将被回收，服务器关闭，Session将被序列化到磁盘等。只要这个HttpSession对象存在，用户就可以根据Session ID来获取这个对象，也就达到了状态的保持。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_059.jpg" alt="Session 相关类图"></p>
<p>从上图可以看出，从request.getSession中获取的HttpSession对象实际上是StandardSession对象的门面对象，这与前面的Request和Servlet是一样的原理。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_060.jpg" alt="Session 工作的时序图"></p>
<p>从时序图中可以看到，从Request中获取的Session对象保存在org.apache. catalina.Manager 类中，它的实现类是org.apache.catalina.session.StandardManager，通过requestedSessionId从StandardManager 的sessions集合中取出StandardSession 对象。由于一个requestedSessionId 对应一个访问的客户端，所以一个客户端，也就是对应一个StandardSession 对象，这个对象正式保存我们创建的Session值的。下面我们看一下StandardManager这个类是如何管理StandardSession 的生命周期的。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_061.jpg" alt="StandardManager 与 StandardSession 的类关系图"></p>
<p>StandardManager 类负责 Servlet 容器中所有的 StandardSession 对象的生命周期管理。当 Servlet 容器重启或关闭时 StandardManager 负责持久化没有过期的 StandardSession 对象，它会将所有的 StandardSession 对象持久化到一个以“SESSIONS.ser”为文件名的文件中。到 Servlet 容器重启时，也就是 StandardManager 初始化时，会重新读取这个文件解析出所有 Session 对象，重新保存在 StandardManager 的 sessions 集合中。Session 恢复状态图如下图所示。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_062.jpg" alt="Session 恢复状态图"></p>
<p>当 Servlet 容器关闭时 StandardManager 类会调用 unload 方法将 sessions 集合中的 StandardSession 对象写到“SESSIONS.ser”[^1]文件中，然后在启动时再按照上面的状态图重新恢复，注意要持久化保存 Servlet 容器中的 Session 对象，必须调用 Servlet 容器的 stop 和 start 命令，而不能直接结束（kill）Servlet 容器的进程，因为直接结束进程，Servlet 容器没有机会调用 unload 方法来持久化这些 Session 对象。</p>
<p>另外，StandardManager 中的 sessions 集合中的 StandardSession 对象并不是永远保存的，否则 Servlet 容器的内存将很容易被消耗尽，所以必须给每个 Session 对象定义一个有效时间，超过这个时间 Session 对象将被清除。在 Tomcat 中这个有效时间是 60（maxInactiveInterval 属性控制）秒，超过 60 秒该 Session 将会过期。检查每个 Session 是否失效是在 Tomcat 的一个后台线程中完成的（backgroundProcess() 方法中）。过期 Session 状态图如下图所示。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_063.jpg" alt=""></p>
<p>除了后台进程检查 Session 是否失效外，当调用 request.getSession() 时也会检查该 Session 是否过期。值得注意的是，request.getSession() 方法调用的 StandardSession 永远都会存在，即使与这个客户端关联的 Session 对象已经过期。如果过期，又会重新创建一个全新的 StandardSession 对象，但是以前设置的 Session 值将会丢失。如果您取到了 Session 对象但是通过 session.getAttribute 取不到前面设置的 Session 值，请不要奇怪，因为很可能它已经失效了，请检查一下 <code>&lt; Manager pathname=”” maxInactiveInterval=”60” /&gt; </code>中 maxInactiveInterval 配置项的值，如果不想让 Session 过期可以设置为 -1。但是您要仔细评估一下，网站的访问量和设置的 Session 的大小，防止将您的 Servlet 容器内存撑爆。如果不想自动创建 Session 对象，也可以通过 request.getSession(boolean create) 方法来判断该客户端关联的 Session 对象是否存在。</p>
<h2 id="Cookie安全问题"><a href="#Cookie安全问题" class="headerlink" title="Cookie安全问题"></a>Cookie安全问题</h2><p>虽然Cookie和Session都可以跟踪客户端的访问记录，但是他们的工作方式显然是不同的，Cookie通过吧所有要保存的数据通过HTTP协议的头部从客户端传递到服务端，又从服务端再传回到客户端，所有的数据都存储在客户端的浏览器里，所以这些Cookie数据可以被访问到，就像我们可以通过Firefox的插件HttpFox查看Cookie，设置可以通过FireCookie插件添加、修改Cookie，所以Cookie的安全性受到了很大的挑战。</p>
<p>相较而言Session的安全性要高很多，因为Session是将数据保存在服务端，只是通过Cookie传递一个SessionID而已，所以Session更适合存储用户隐私和重要的数据。</p>
<h2 id="分布式-Session-框架"><a href="#分布式-Session-框架" class="headerlink" title="分布式 Session 框架"></a>分布式 Session 框架</h2><p>从前面的分析可知，Session 和 Cookie 各自有优点和缺点。在大型互联网系统中，单独使用 Cookie 和 Session 都是不可行的，原因很简单。因为如果使用 Cookie，可以很好地解决应用的分布式部署问题，大型互联网应用系统一个应用有上百台机器，而且有很多不同的应用系统协同工作，由于 Cookie 是将值存储在客户端的浏览器里，用户每次访问都会将最新的值带回给处理该请求的服务器，所以也就解决了同一个用户的请求可能不在同一台服务器处理而导致的 Cookie 不一致的问题。</p>
<h3 id="存在哪些问题"><a href="#存在哪些问题" class="headerlink" title="存在哪些问题"></a>存在哪些问题</h3><p>这种“谁家的孩子谁抱走”的处理方式的确是大型互联网的一个比较简单但是的确可以解决问题的处理方式，但是这种处理方式也会带来了很多其他问题，如：</p>
<ul>
<li>客户端 Cookie 存储限制。随着应用系统的增多 Cookie 数量也快速增加，但浏览器对于用户 Cookie 的存储是有限制的。例如，IE7 之前的 IE 浏览器，Cookie 个数的限制是 20 个，后续的版本，包括 Firefox 等，Cookie 个数的限制都是 50 个。总大小不超过 4KB，超过限制就会出现丢弃 Cookie 的现象发生，这会严重影响应用系统的正常使用。</li>
<li>Cookie 管理的混乱。在大型互联网应用系统中，如果每个应用系统都自己管理每个应用使用的 Cookie，将会导致混乱，由于通常应用系统都在同一个域名下，Cookie 又有上面一条提到的限制，所以没有统一管理很容易出现 Cookie 超出限制的情况。</li>
<li>安全令人担忧。虽然可以通过设置 HttpOnly 属性防止一些私密 Cookie 被客户端访问，但是仍然不能保证 Cookie 无法被篡改。为了保证 Cookie 的私密性通常会对 Cookie 进行加密，但是维护这个加密 Key 也是一件麻烦的事情，无法保证定期来更新加密 Key 也是带来安全性问题的一个重要因素。</li>
</ul>
<p>当以上问题不能再容忍下去的时候，就不得不想其他办法处理了。</p>
<h3 id="可以解决哪些问题"><a href="#可以解决哪些问题" class="headerlink" title="可以解决哪些问题"></a>可以解决哪些问题</h3><p>既然 Cookie 有以上这些问题，Session 也有它的好处，为何不结合使用 Session 和 Cookie 呢？下面是分布式 Session 框架可以解决的问题：</p>
<ul>
<li>Session 配置的统一管理。</li>
<li>Cookie 使用的监控和统一规范管理。</li>
<li>Session 存储的多元化。</li>
<li>Session 配置的动态修改。</li>
<li>Session 加密 key 的定期修改。</li>
<li>充分的容灾机制，保持框架的使用稳定性。</li>
<li>Session 各种存储的监控和报警支持。</li>
<li>Session 框架的可扩展性，兼容更多的 session 机制如 wapSession。</li>
<li>跨域名 Session 与 Cookie 如何共享，现在同一个网站可能存在多个域名，如何将 Session 和 Cookie 在不同的域名之间共享是一个具有挑战性的问题。</li>
</ul>
<h3 id="总体实现思路"><a href="#总体实现思路" class="headerlink" title="总体实现思路"></a>总体实现思路</h3><p>分布式 Session 框架的架构图如下图所示。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_064.jpg" alt="Session 框架的架构图"></p>
<p>为了达成上面所说的几点目标，我们需要一个服务订阅服务器，在应用启动时可以从这个订阅服务器订阅这个应用需要的可写 Session 项和可写 Cookie 项，这些配置的 Session 和 Cookie 可以限制这个应用能够使用哪些 Session 和 Cookie，甚至可以控制 Session 和 Cookie 可读或者可写。这样可以精确地控制哪些应用可以操作哪些 Session 和 Cookie，可以有效控制 Session 的安全性和 Cookie 的数量。</p>
<p>如 Session 的配置项可以为如下形式：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">session</span>&gt;</span> </div><div class="line">       <span class="tag">&lt;<span class="name">key</span>&gt;</span>sessionID<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">ookiekey</span>&gt;</span>sessionID<span class="tag">&lt;/<span class="name">ookiekey</span> &gt;</span> </div><div class="line">       <span class="tag">&lt;<span class="name">lifeCycle</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">lifeCycle</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">base64</span>&gt;</span>true<span class="tag">&lt;/<span class="name">base64</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;/<span class="name">session</span> &gt;</span></div></pre></td></tr></table></figure>
<p>Cookie 的配置可以为如下形式：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">cookie</span>&gt;</span> </div><div class="line">       <span class="tag">&lt;<span class="name">key</span>&gt;</span>cookie<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </div><div class="line">       <span class="tag">&lt;<span class="name">lifeCycle</span>&gt;</span><span class="tag">&lt;/<span class="name">lifeCycle</span>&gt;</span> </div><div class="line">       <span class="tag">&lt;<span class="name">type</span>&gt;</span>1<span class="tag">&lt;/<span class="name">type</span>&gt;</span> </div><div class="line">       <span class="tag">&lt;<span class="name">path</span>&gt;</span>/wp<span class="tag">&lt;/<span class="name">path</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">domain</span>&gt;</span>xulingbo.net<span class="tag">&lt;/ <span class="attr">domain</span>&gt;</span> </div><div class="line">       <span class="tag">&lt;<span class="name">decrypt</span>&gt;</span>false<span class="tag">&lt;/<span class="name">decrypt</span>&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">httpOnly</span>&gt;</span>false<span class="tag">&lt;/ <span class="attr">httpOnly</span> &gt;</span> </div><div class="line"> <span class="tag">&lt;/<span class="name">cookie</span>&gt;</span></div></pre></td></tr></table></figure>
<p>统一通过订阅服务器推送配置可以有效地集中管理资源，所以可以省去每个应用都来配置 Cookie，简化 Cookie 的管理。如果应用要使用一个新增 Cookie，可以通过一个统一的平台来申请，申请通过才将这个配置项增加到订阅服务器。如果是一个所有应用都要使用的全局 Cookie，那么只需将这个 Cookie 通过订阅服务器统一推送过去就行了，省去了要在每个应用中手动增加 Cookie 的配置。</p>
<p>关于这个订阅服务器现在有很多开源的配置服务器，如 Zookeeper 集群管理服务器，可以统一管理所有服务器的配置文件。</p>
<p>既然是一个分布式 Session 的处理框架，必然会重新实现 HttpSession 的操作接口，使得应用操作 Session 的对象都是我们实现的 InnerHttpSession 对象，这个操作必须在进入应用之前完成，所以可以配置一个 filter 拦截用户的请求。</p>
<p>先看一下如何封装 HttpSession 对象和拦截请求。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_065.jpg" alt="HttpSession 拦截请求时序图"></p>
<p>我们可以在应用的 web.xml 中配置一个 SessionFilter，用于在请求到达 MVC 框架之前封装 HttpServletRequest 和 HttpServletResponse 对象，并创建我们自己的 InnerHttpSession 对象，把它设置到 request 和 response 对象中。这样应用系统通过 request.getHttpSession() 返回的就是我们创建的 InnerHttpSession 对象了，我们可以拦截 response 的 addCookies 设置的 Cookie。</p>
<p>在时序图中，应用创建的所有 Session 对象都会保存在 InnerHttpSession 对象中，当用户的这次访问请求完成时，Session 框架将会把这个 InnerHttpSession 的所有内容再更新到分布式缓存中，以便于这个用户通过其他服务器再次访问这个应用系统。另外，为了保证一些应用对 Session 稳定性的特殊要求可以将一些非常关键的 Session 再存储到 Cookie 中，如当分布式缓存存在问题时，可以将部分 Session 存储到 Cookie 中，这样即使分布式缓存出现问题也不会影响关键业务的正常运行。</p>
<p>还有一个非常重要的问题就是如何处理跨域名来共享 Cookie 的问题。我们知道 Cookie 是有域名限制的，也就是一个域名下的 Cookie 不能被另一个域名访问，所以如果在一个域名下已经登录成功，如何访问到另外一个域名的应用且保证登录状态仍然有效，这个问题大型网站应该经常会遇到。如何解决这个问题呢？下面介绍一种处理方式，如下图所示。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_066.jpg" alt="跨域名同步 session"></p>
<p>从图中可以看出，要实现 Session 同步，需要另外一个跳转应用，这个应用可以被一个或者多个域名访问，它的主要功能是从一个域名下取得 sessionID，然后将这个 sessionID 同步到另外一个域名下。这个 sessionID 其实就是一个 Cookie，相当于我们经常遇到的 JSESSIONID，所以要实现两个域名下的 Session 同步，必须要将同一个 sessionID 作为 Cookie 写到两个域名下。</p>
<p>总共 12 步，一个域名不用登录就取到了另外一个域名下的 Session，当然这中间有些步骤还可以简化，也可以做一些额外的工作，如可以写一些需要的 Cookie，而不仅仅只传一个 sessionID。</p>
<p>除此之外，该框架还能处理 Cookie 被盗取的问题。如您的密码没有丢失，但是您的账号却有可能被别人登录的情况，这种情况很可能就是因为您登录成功后，您的 Cookie 被别人盗取了，盗取您的 Cookie 的人将您的 Cookie 加入到他的浏览器，然后他就可以通过您的 Cookie 正常访问您的个人信息了，这是一个非常严重的问题。在这个框架中我们可以设置一个 Session 签名，当用户登录成功后我们根据用户的私密信息生成的一个签名，以表示当前这个唯一的合法登录状态，然后将这个签名作为一个 Cookie 在当前这个用户的浏览器进程中和服务器传递，用户每次访问服务器都会检查这个签名和从服务端分布式缓存中取得的 Session 重新生成的签名是否一致，如果不一致，显然这个用户的登录状态不合法，服务端将清除这个 sessionID 在分布式缓存中的 Session 信息，让用户重新登录。</p>
<h2 id="Cookie-压缩"><a href="#Cookie-压缩" class="headerlink" title="Cookie 压缩"></a>Cookie 压缩</h2><p>Cookie 是在 HTTP 的头部，所以通常的 gzip 和 deflate 针对 HTTP Body 的压缩不能压缩 Cookie，如果 Cookie 量非常大，可以考虑将 Cookie 也做压缩，压缩方式是将 Cookie 的多个 k/v 对看成普通的文本，做文本压缩。压缩算法同样可以使用 gzip 和 deflate 算法，但是需要注意的一点是，根据 Cookie 的规范，Cookie 中不能包含控制字符，仅仅只能包含 ASCII 码为（34 ～ 126）的可见字符。所以要将压缩后的结果再进行转码，可以进行 Base32 或者 Base64 编码。</p>
<p>可以配置一个 Filter 在页面输出时对 Cookie 进行全部或者部分压缩，如下代码所示：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private void compressCookie(Cookie c, HttpServletResponse res) &#123; </div><div class="line">       try &#123; </div><div class="line">           ByteArrayOutputStream bos = null; </div><div class="line">           bos = new ByteArrayOutputStream(); </div><div class="line">           DeflaterOutputStream dos = new DeflaterOutputStream(bos); </div><div class="line">           dos.write(c.getValue().getBytes()); </div><div class="line">           dos.close(); </div><div class="line">           System.out.println("</div><div class="line">           before compress length:" + c.getValue(). getBytes().length); </div><div class="line">           String compress = new sun.misc.BASE64Encoder().encode(bos. toByteArray()); </div><div class="line">           res.addCookie(new Cookie("compress", compress)); </div><div class="line">           System.out.println("after compress length:" + compress.getBytes(). length); </div><div class="line">       &#125; catch (IOException e) &#123; </div><div class="line">           e.printStackTrace(); </div><div class="line">       &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码是用 DeflaterOutputStream 对 Cookie 进行压缩的，Deflater 压缩后再进行 BASE64 编码，相应地用 InflaterInputStream 进行解压。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unCompressCookie</span><span class="params">(Cookie c)</span> </span>&#123; </div><div class="line">        <span class="keyword">try</span> &#123; </div><div class="line">            ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream(); </div><div class="line">            <span class="keyword">byte</span>[] compress = </div><div class="line">        <span class="keyword">new</span> sun.misc.BASE64Decoder().decodeBuffer(<span class="keyword">new</span> String(c.getValue().getBytes())); </div><div class="line">            ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(compress); </div><div class="line">            InflaterInputStream inflater = <span class="keyword">new</span> InflaterInputStream(bis); </div><div class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; </div><div class="line">            <span class="keyword">int</span> count; </div><div class="line">            <span class="keyword">while</span> ((count = inflater.read(b)) &gt;= <span class="number">0</span>) &#123; </div><div class="line">                out.write(b, <span class="number">0</span>, count); </div><div class="line">            &#125; </div><div class="line">            inflater.close(); </div><div class="line">            System.out.println(out.toByteArray());; </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; </div><div class="line">            e.printStackTrace(); </div><div class="line">        &#125; </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>2KB 大小的 Cookie 压缩前与压缩后字节数相差 20% 左右，如果您的网站的 Cookie 在 2KB~3KB 左右，一天有 1 亿的 PV，那么一天就能够产生 4TB 的带宽流量了，从节省带宽成本来说压缩还是很有必要的。</p>
<h2 id="表单重复提交问题"><a href="#表单重复提交问题" class="headerlink" title="表单重复提交问题"></a>表单重复提交问题</h2><p>网站中在很多地方都有表单重复提交问题，一种情况是用户在网速慢的情况下可能会重复提交表单，还有就是恶意用户通过程序来发送恶意请求，在这些情况下都要设计一个防止表单重复提交的机制。</p>
<p>要能够防止表单重复提交，就要标识用户的每一次访问请求，使得每一次访问对服务端来说都是唯一确定的。为了标识用户的每次访问请求，可以在用户请求一个表单域时增加一个隐藏表单项，这个表单项的值每次都是唯一的 token，如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">”form”</span> <span class="attr">method</span>=<span class="string">”post”</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">“crsf_token”</span> <span class="attr">value</span>=<span class="string">“xxxx”/</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当用户在请求时生成这个唯一的 token 时，同时将这个 token 保存在用户的 Session 中，等用户提交请求时检查这个 token 和当前的 Session 中保存的 token 是否一致。如果一致，说明没有重复提交，否则用户提交上来的 token 已经不是当前的这个请求的合法 token。其工作过程如图所示。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_067.jpg" alt="工作过程"></p>
<p>上图是用户发起对表单页面的请求过程，生成唯一的 token 需要一个算法，最简单的就是可以根据一个种子作为 key 生成一个随机数，并保存在 Session 中，等下次用户提交表单时做验证。验证表单的过程如下图所示。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_068.jpg" alt=".验证表单的过程"></p>
<p>当用户提交表单时会将请求时生成的 token 带回来，这样就可以和 Session 中保存的 token 做对比，从而确认这次表单验证是否合法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Cookie 和 Session 都是为了保持用户访问的连续状态，之所以要保持这种状态，一方面是为了方便业务实现，另一方面就是简化服务端程序设计，提高访问性能，但是这也带来了另外一些挑战，如安全问题、应用的分布式部署带来的 Session 的同步问题及跨域名 Session 的同步等一系列问题。本章分析了 Cookie 和 Session 的工作原理，并介绍了一致分布式 Session 的解决方案。</p>
<p>[^1]:  tomcat停止的时候在 /tomcat-6.0.26/work/Catalina/localhost/_/下面生成session.ser文件。文件里面保存了session信息。tomcat启动的时候，从session.ser中读取信息，然后删除session.ser文件。</p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="http://www.jiagoushuo.com/article/1000083.html" target="_blank" rel="external"><font color="#87CEFA">深入理解web开发中的Session和Cookie</font></a></p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-10-22</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Session 与 Cookie 不管是对 Java Web 的初学者还是熟练使用者来说都是一个令人头疼的问题。在初入职场时恐怕很多程序员在面试的时候都被问到过这个问题。其实这个问题回答起来既简单又复杂，简单是因为它们本身只是 HTTP 协议中的一个配置项，在 Servlet 规范中也只是对应到一个类而已；说它复杂原因在于当我们的系统大到需要用到很多 Cookie 的时候，我们不得不考虑 HTTP 协议对 Cookie 数量和大小的限制，那么如何才能解决这个瓶颈呢？ Session 也会有同样的问题，当我们的一个应用系统有几百台服务器的时候如何解决 Session 在多台服务器之间共享？&lt;/p&gt;
&lt;p&gt;Session 与 Cookie 的作用都是为了保持访问用户与后端服务器的交互状态。它们有各自的优点，也有各自的缺陷，然而具有讽刺意味的是它们的优点和它们的使用场景又是矛盾的。例如，使用 Cookie 来传递信息时，随着 Cookie 个数的增多和访问量的增加，它占用的网络带宽也很大，试想假如 Cookie 占用 200 个字节，如果一天的 PV 有几亿，它要占用多少带宽？所以有大访问量的时候希望用 Session，但是 Session 的致命弱点是不容易在多台服务器之间共享，所以这也限制了 Session 的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>垃圾对象的判定及垃圾收集算法</title>
    <link href="http://yoursite.com/2016/09/17/%E5%9E%83%E5%9C%BE%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%A4%E5%AE%9A%E5%8F%8A%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2016/09/17/垃圾对象的判定及垃圾收集算法/</id>
    <published>2016-09-17T11:58:10.000Z</published>
    <updated>2017-07-30T12:00:38.309Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_021.png" alt="”标记—清除“算法示意图"><br><a id="more"></a></p>
<h2 id="垃圾对象的判定"><a href="#垃圾对象的判定" class="headerlink" title="垃圾对象的判定"></a>垃圾对象的判定</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。<br>但是，主流Java虚拟机里面没有选用引用计数法来管理内存，其中最主要的原因是它很难解决对象之间互相循环引用的问题。</p>
<h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>可达性分析算法的基本思想就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain)，当一个对象到GC Roots没有任何引用链相连（用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用。<br>在Java语言中，可作为GC Roots的对象包括下面几种：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的的对象。</li>
<li>方法区中类静态属性引用的对象。</li>
<li>方法去中常量引用的对象。</li>
<li>本地方法栈JNI（即一般说的Native方法）引用的对象。</li>
</ul>
<h3 id="回收时机"><a href="#回收时机" class="headerlink" title="回收时机"></a>回收时机</h3><p>可达性分析算法中不可达的对象，也并非是“非死不可”，要真正宣告一个对象的死亡，至少需要经历两次标记过程：<br>如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。<br>如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做F-Queue的队列之中，并在稍后由一个由虚拟机自动建立的、低优先级的finalizer线程去执行它。这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是，如果一个对象在finalize()方法中执行缓慢，或者发生了死循环（更极端的情况），将很可能导致F-Queue队列中其它对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己—只要重新与引用链上的任何一个对象建立关联即可，那它在第二次标记时将被移除出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的被回收了。</p>
<h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记—清除算法"><a href="#标记—清除算法" class="headerlink" title="标记—清除算法"></a>标记—清除算法</h3><p>最基础的收集算法是“标记—清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段： 首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_052.jpg" alt="”标记—清除“算法示意图"></p>
<p>该算法的主要不足有两个：</p>
<ul>
<li>一是效率问题，标记和清除过程的效率都不高</li>
<li>二是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后再程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>
</ul>
<h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>为了解决“标记-清除”算法的效率问题，一种称为“复制”(Copying)的收集算法出现了。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_053.jpg" alt="”复制“算法示意图"></p>
<p>“复制”算法将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另一块上面，然后再把已使用过的内存空间一次清理掉。<br>这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为了原来的一半，未免太高了一点。<br>现在的商业虚拟机都采用这种收集算法来回收新生代。</p>
<h3 id="标记—整理算法"><a href="#标记—整理算法" class="headerlink" title="标记—整理算法"></a>标记—整理算法</h3><p>根据老年代的特点，有人提出了一种“标记-整理”（Mark-Compact）算法,同“标记-清除”算法一样，该算法也有“标记“和”整理“两个阶段：首先标记出所有需要回收的对象，让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_054.jpg" alt="”标记—整理“算法示意图"></p>
<h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>当前商业虚拟机的垃圾收集都采用“分代收集”（Generational Collection）算法，根据对象存活周期将内存划分为几块。一般是将Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_055.jpg" alt="”分代收集“算法示意图"></p>
<h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><p>在新生代，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。<br>IBM公司的专门研究表明，新生代中的对象98%是“朝生夕死”的，所以将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。当Survivor空间不够用时，需要依赖其它内存（这里指老年代）进行分配担保（Handle Promotion）。</p>
<h4 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h4><p>老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或者“标记-整理”算法进行回收</p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p>《深入理解Java虚拟机》</p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-09-17</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_021.png&quot; alt=&quot;”标记—清除“算法示意图&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="《深入理解Java虚拟机》读书笔记" scheme="http://yoursite.com/categories/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="垃圾对象的判定" scheme="http://yoursite.com/tags/%E5%9E%83%E5%9C%BE%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%A4%E5%AE%9A/"/>
    
      <category term="垃圾收集算法" scheme="http://yoursite.com/tags/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域与内存溢出异常</title>
    <link href="http://yoursite.com/2016/09/10/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2016/09/10/Java内存区域与内存溢出异常/</id>
    <published>2016-09-10T10:39:44.000Z</published>
    <updated>2017-07-16T13:58:02.777Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_013.png" alt="学习思维导图"><br><a id="more"></a></p>
<h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_032.png" alt="Java虚拟机运行时数据区"></p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器（Program Counter Register）可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。<br>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此每个线程都需要一个独立的程序计数器，各条线程之间计数器互不硬性，独立存储，我们称这类内存区域为“线程私有”的内存。<br>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>
<h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。<br>经常有人把Java内存区分为堆内存（Heap）和栈内存（Stack），这种分法比较粗糙，其中所说的“栈”就是指虚拟机栈，或者说是虚拟机栈中的局部变量表部分。局部变量表存放了编译器可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</p>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈（Native Method Stack）与虚拟机栈所发挥的作用是非常相似的，它们的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本带方法栈则为虚拟机使用到Native方法服务。</p>
<h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配。<br>Java堆是垃圾收集器管理的主要区域，因此很多好时候也被称作“GC堆”（Garbage Collected Heap）。从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区。不过无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。<br>根据Java虚拟机规范的规定，Java堆刻意处于物理上不连续的内存空间中，只要逻辑上是连续的即可。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。</p>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把它描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开。<br>方法区跟Java堆同样不需要连续的内存和可以选择固定大小或者可拓展外，还可以选择不实现垃圾收集。</p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。<br>一般来说，除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。<br>运行时常量池具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区常量池，运行期间也可能将新的常量放入池中。</p>
<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。<br>显然，本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，肯定还是受到本机总内存（包括RAM和SWAP区或者分页文件）大小以及出来器寻址空间的限制。</p>
<h2 id="内存溢出异常"><a href="#内存溢出异常" class="headerlink" title="内存溢出异常"></a>内存溢出异常</h2><h3 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h3><p>Java堆用于存储对象实例，只要不断地创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量到达最大堆的容量限制后就会发生内存溢出异常。<br>要解决这个区域的异常，一般的手段是先通过内存映像分析工具（如Eclipse Memory Analyzer）堆Dump出来的堆砖出快照进行分析，重点是确认内存中的对象是否是必要的，也就是先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢出（Memory Overflow）<br>如果是内存泄漏，可通过工具查看对象到GC Roots的引用链。找到泄漏对象是通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收它们。<br>如果是内存溢出，就应当检查虚拟机的堆参数（-Xmx和Xms），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</p>
<h3 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h3><p>关于虚拟机栈和本地方法栈，在Java虚拟机规范中描述了两种异常：<br>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。<br>如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</p>
<h3 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h3><p>对于方法区的测试，基本的思路是运行时产生大量的类去填满方法区，直到溢出。<br>方法区溢出也是一种常见的内存溢出异常，一个类要被垃圾收集器回收掉，判定条件是比较苛刻的。在经常动态生成大量Class的应用中，特别需要注意类的回收状况。这类场景除了上面提到的程序使用了CGLib字节码增强和动态语言之外，常见的还有：大量JSP或动态产生JSP文件、给予OSGi的应用等。</p>
<h3 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h3><p>DirectMemory容量可通过-XX：MaxDirectMemorySize指定，如果不指定，则默认与Java堆最大值（-Xmx指定）一样。<br>由DirectMemory导致的内存溢出，一个明显的特征是Heap Dump文件中不会看见明显的异常，如果发现OOM之后Dump文件很小，而程序中又直接或间接使用了NIO，那么就可以考虑检查一下是不是这方面的原因。</p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p>《深入理解Java虚拟机》</p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-09-10</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_013.png&quot; alt=&quot;学习思维导图&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="《深入理解Java虚拟机》读书笔记" scheme="http://yoursite.com/categories/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="内存溢出" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    
      <category term="异常" scheme="http://yoursite.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>[分享]阿里学习计划</title>
    <link href="http://yoursite.com/2016/09/03/%E5%88%86%E4%BA%AB-%E9%98%BF%E9%87%8C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2016/09/03/分享-阿里学习计划/</id>
    <published>2016-09-03T13:55:33.000Z</published>
    <updated>2017-07-16T14:00:19.498Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_014.png" alt="阿里学习计划"><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_014.png&quot; alt=&quot;阿里学习计划&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://yoursite.com/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="阿里学习计划" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>配置Nginx反向代理Tomcat，并实现负载均衡、动静分离</title>
    <link href="http://yoursite.com/2016/08/27/%E9%85%8D%E7%BD%AENginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86Tomcat%EF%BC%8C%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E3%80%81%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    <id>http://yoursite.com/2016/08/27/配置Nginx反向代理Tomcat，并实现负载均衡、动静分离/</id>
    <published>2016-08-27T05:10:15.000Z</published>
    <updated>2017-07-15T08:58:57.387Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_012.webp" alt=""><br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx与Apache HTTP Server Project（简称Apache）一样，都是开源的HTTP服务器软件，它通常运行在服务器之上，绑定服务器的IP地址并监听某一个tcp端口来接收并处理HTTP请求，这样客户端（一般来说是IE, Firefox，Chrome这样的浏览器）就能够通过HTTP协议来获取服务器上的网页（HTML格式）、文档（PDF格式）、音频（MP4格式）、视频（MOV格式）等等资源。而Tomcat是用来处理java程序的解释器。本身apache也好，nginx也好，都是无法直接处理java语言的，只能通过设置，当收到java文件请求时，传给后方tomcat处理，再把tomcat的反应回给浏览器。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>JDK      ： 1.8.0_101<br>Nginx    ： 9.0.0.M9<br>Tomcat   ： 1.10.0<br>操作系统 ： ubuntu-16.04（64）</p>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h3 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="什么是反向代理"><a href="#什么是反向代理" class="headerlink" title="什么是反向代理"></a>什么是反向代理</h4><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_026.jpg" alt=""></p>
<p>从上图可以看出：反向代理服务器位于网站机房，代理网站Web服务器接收Http请求，对请求进行转发。</p>
<h4 id="反向代理的作用"><a href="#反向代理的作用" class="headerlink" title="反向代理的作用"></a>反向代理的作用</h4><ul>
<li>保护网站安全：任何来自Internet的请求都必须先经过代理服务器；</li>
</ul>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_027.jpg" alt=""></p>
<ul>
<li>通过配置缓存功能加速Web请求：可以缓存真实Web服务器上的某些静态资源，减轻真实Web服务器的负载压力；</li>
</ul>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_028.jpg" alt=""></p>
<ul>
<li>实现负载均衡：充当负载均衡服务器均衡地分发请求，平衡集群中各个服务器的负载压力；</li>
</ul>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_029.jpg" alt=""></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote>
<p>在配置之前，如果怕自己在配置过程中出错，可以将需要操作的配置文件进行备份，只需要使用sudo cp -rf fileName fileName-copy 即可备份文件。</p>
</blockquote>
<h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><p>修改/opt/tomcat9.0/conf目录下的server.xml文件<font size="3" color="red"></font></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps/springmvc&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class="line">	&lt;Context path=&quot;/springmvc&quot;  docBase=&quot;springmvc.war&quot;/&gt;    </div><div class="line">	&lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;  prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class="line">&lt;/Host&gt;</div></pre></td></tr></table></figure>
<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>修改/var/log/nginx目录下的default文件，<font size="3" color="red">保证server_name与上面Tomcat配置文件server.xml中的Host name 是一致的</font>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    #监听端口</div><div class="line">	listen 80 default_server;</div><div class="line">	listen [::]:80 default_server;</div><div class="line">	#网站程序根目录，一般Nginx和Tomcat在同一个目录</div><div class="line">	root /opt/tomcat9.0/webapps/springmvc;</div><div class="line">	index index.html index.htm index.nginx-debian.html;</div><div class="line">	#server_name要与Tomcat的server.xml中的Host name一致</div><div class="line">	server_name localhost;</div><div class="line">	location / &#123;    </div><div class="line">        proxy_set_header        Host $host;</div><div class="line">        proxy_set_header        X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_pass http://192.168.182.132:8080;  </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Ubuntu下查询本机IP命令 ifconfig -a</p>
</blockquote>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>确认保存好配置文件之后，启动Tomcat和Nginx服务器，在浏览器中输入<a href="http://localhost/springmvc/test，会出现以下页面" target="_blank" rel="external">http://localhost/springmvc/test，会出现以下页面</a></p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_030.png" alt="成功页面"></p>
<p>此时我们可以查看一下Tomcat和Nginx的日志<br>Nginx(/var/log/nginx/access.log)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 - - [07/Sep/2016:15:30:47 +0800] &quot;GET /springmvc/test HTTP/1.1&quot; 200 101 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:48.0) Gecko/20100101 Firefox/48.0&quot;</div></pre></td></tr></table></figure>
<p>Tomcat(/opt/tomcat9.0/logs/localhost_access_log.xxx.txt)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.182.132 - - [07/Sep/2016:15:30:47 +0800] &quot;GET /springmvc/test HTTP/1.0&quot; 200 106</div></pre></td></tr></table></figure>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a><a href="https://nginx.org/en/docs/http/load_balancing.html" target="_blank" rel="external">负载均衡</a></h2><p>负载均衡 建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。<br>负载均衡，英文名称为Load Balance，其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务</p>
<h3 id="Nginx支持的负载均衡策略"><a href="#Nginx支持的负载均衡策略" class="headerlink" title="Nginx支持的负载均衡策略"></a>Nginx支持的负载均衡策略</h3><p>1 round-robin<br>requests to the application servers are distributed in a round-robin fashion<br>2 least-connected<br>next request is assigned to the server with the least number of active connections<br>3 ip-hash<br>a hash-function is used to determine what server should be selected for the next request (based on the client’s IP address)</p>
<h3 id="负载均衡的示例"><a href="#负载均衡的示例" class="headerlink" title="负载均衡的示例"></a>负载均衡的示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">upstream tomcat &#123;   </div><div class="line"> server 192.168.182.132:8080 weight=2;   </div><div class="line"> server 192.168.182.132:8081 weight=1;</div><div class="line"> server 192.168.182.132:8082;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">	listen 80 default_server;</div><div class="line">	listen [::]:80 default_server;</div><div class="line"></div><div class="line">	root /opt/tomcat9.0/webapps/springmvc;</div><div class="line"></div><div class="line">	index index.html index.htm index.nginx-debian.html;</div><div class="line"></div><div class="line">	server_name localhost;</div><div class="line">	</div><div class="line">	location / &#123;</div><div class="line">        proxy_set_header        Host $host;</div><div class="line">        proxy_set_header        X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_pass http://tomcat;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>从应用方面讲，Tomcat一般是做动态分析才会用到，支持jsp的解析，而Nginx一般是做静态分析，本身并不具备动态解析功能，需要配置其他插件或者通过其他软件系统才具备动态功能；而在性能方面，不做系统调优的情况下，Tomcat一般支持并发并不高，而Nginx在静态方面支持并发轻松达几万。为了充分利用两者优秀的性能，我们让Tomcat处理用户请求jsp页面实现动态分离，用Nginx处理css、js、html等静态资源，提高性能。</p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="创建静态资源放置的文件夹"><a href="#创建静态资源放置的文件夹" class="headerlink" title="创建静态资源放置的文件夹"></a>创建静态资源放置的文件夹</h4><p>将项目中放置静态资源的文件夹拷贝至/opt/springmvc目录下，<font color="red">必须保证各个静态资源的相对路径和在项目中是一致的，否则会出现404错误</font>。<br><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_031.png" alt=""></p>
<h4 id="server下配置对应的localtion"><a href="#server下配置对应的localtion" class="headerlink" title="server下配置对应的localtion"></a>server下配置对应的localtion</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">upstream tomcat &#123;   </div><div class="line"> server 192.168.182.132:8080;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">	listen 80 default_server;</div><div class="line">	listen [::]:80 default_server;</div><div class="line"></div><div class="line">	root /opt/tomcat9.0/webapps/springmvc;</div><div class="line"></div><div class="line">	index index.html index.htm index.nginx-debian.html;</div><div class="line"></div><div class="line">	server_name localhost;</div><div class="line">	</div><div class="line">	location / &#123;</div><div class="line">        proxy_set_header        Host $host;</div><div class="line">        proxy_set_header        X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_pass http://tomcat;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	#使用正则表达式拦截后缀名为js、css的静态资源</div><div class="line">	location ~.*\.(js|css)?$ &#123;  </div><div class="line">		#静态资源放置的位置</div><div class="line">		root /opt;</div><div class="line">		#缓存过期时间</div><div class="line">		expires 1d;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>1 <a href="https://segmentfault.com/q/1010000006101263" target="_blank" rel="external">Tomcat+Nginx实现动静分离的功能，动态请求为什么没有发到Tomcat这里？</a></p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="http://nginx.org/en/docs/" target="_blank" rel="external">nginx documentation</a><br><a href="http://www.open-open.com/lib/view/open1417488526633.html" target="_blank" rel="external">Nginx搭建反向代理服务器过程详解</a><br><a href="http://www.cnblogs.com/wufengtinghai/p/5237165.html" target="_blank" rel="external">使用Nginx实现负载均衡</a><br><a href="https://www.zhihu.com/question/32212996" target="_blank" rel="external">tomcat 与 nginx，apache的区别是什么？</a></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>写的比较简略，不成章法，接下来会慢慢完善</p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-08-27</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_012.webp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统下安装Nginx服务器的方法</title>
    <link href="http://yoursite.com/2016/08/20/Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/08/20/Ubuntu系统下安装Nginx服务器的方法/</id>
    <published>2016-08-20T05:08:41.000Z</published>
    <updated>2017-07-15T08:55:48.934Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_011.png" alt=""><br><a id="more"></a></p>
<h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><p>Nginx是一个非常轻量级的HTTP服务器，Nginx，它的发音为“engine x”，是一个高性能的HTTP和反向代理服务器，同时也是一个IMAP/POP3/SMTP 代理服务器。</p>
<h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><p>操作系统 ：ubuntu-16.04（64）</p>
<h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><p>首先因为我并不是项目应用，而且也不是很频繁的使用Linux系统，所以选择更容易上手的Ubuntu系统作为本文Demo的对象。如果选择Debian等Linux系统或者使用源代码安装，在安装Nginx服务器之前需要手动安装依赖的库，但是在Ubuntu系统下，使用在线安装相对来说简单一点。<font color="red" size="3">在这里要提醒一下，在线安装和源代码安装的一些命令行和安装位置是不一样的，这个需要具体对待。</font></p>
<p>使用apt-get在线安装命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo apt-get install nginx</div></pre></td></tr></table></figure>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_023.png" alt="nginx安装"></p>
<p>从上图我们可以看出，安装的Nginx的版本是<strong>1.10.0</strong>。Ubuntu安装Nginx之后的文件结构大致如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">文件</th>
<th style="text-align:center">路径</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">配置文件</td>
<td style="text-align:center">/etc/nginx</td>
</tr>
<tr>
<td style="text-align:center">虚拟主机</td>
<td style="text-align:center">/etc/nginx/sites-available</td>
</tr>
<tr>
<td style="text-align:center">启动程序</td>
<td style="text-align:center">/usr/sbin/nginx</td>
</tr>
<tr>
<td style="text-align:center">日志</td>
<td style="text-align:center">/var/log/nginx</td>
</tr>
<tr>
<td style="text-align:center">nginx启动脚本</td>
<td style="text-align:center">/etc/init.d/</td>
</tr>
<tr>
<td style="text-align:center">默认虚拟主机</td>
<td style="text-align:center">/usr/share/nginx/www</td>
</tr>
</tbody>
</table>
<h3 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h3><h4 id="在线安装的启动过程"><a href="#在线安装的启动过程" class="headerlink" title="在线安装的启动过程"></a>在线安装的启动过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo /etc/init.d/nginx start</div></pre></td></tr></table></figure>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_024.png" alt=""></p>
<p>如果出现<strong>[ ok ] Starting nginx (via systemctl): nginx.service.</strong>的提示，说明Nginx服务器启动成功，这个时候我们在浏览器中访问一下<a href="http://localhost/，正常情况下会出现Nginx的欢迎页面如下图。" target="_blank" rel="external">http://localhost/，正常情况下会出现Nginx的欢迎页面如下图。</a></p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_025.png" alt=""></p>
<h4 id="常用Nginx命令"><a href="#常用Nginx命令" class="headerlink" title="常用Nginx命令"></a>常用Nginx命令</h4><p>启动Nginx服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo /etc/init.d/nginx start</div></pre></td></tr></table></figure>
<p>关闭Nginx服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx stop</div></pre></td></tr></table></figure>
<p>重启Nginx服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure>
<p>重新加载配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure>
<p>检查配置文件是否出错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -t</div></pre></td></tr></table></figure>
<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><h3 id="主要配置文件"><a href="#主要配置文件" class="headerlink" title="主要配置文件"></a>主要配置文件</h3><p>通过上面的表格我们知道Nginx的配置文件是/etc/nginx/nginx.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">user www-data;</div><div class="line">worker_processes auto;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">	worker_connections 768;</div><div class="line">	# multi_accept on;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line"></div><div class="line">	##</div><div class="line">	# Basic Settings</div><div class="line">	##</div><div class="line"></div><div class="line">	sendfile on;</div><div class="line">	tcp_nopush on;</div><div class="line">	tcp_nodelay on;</div><div class="line">	keepalive_timeout 65;</div><div class="line">	types_hash_max_size 2048;</div><div class="line">	# server_tokens off;</div><div class="line"></div><div class="line">	# server_names_hash_bucket_size 64;</div><div class="line">	# server_name_in_redirect off;</div><div class="line"></div><div class="line">	include /etc/nginx/mime.types;</div><div class="line">	default_type application/octet-stream;</div><div class="line"></div><div class="line">	##</div><div class="line">	# SSL Settings</div><div class="line">	##</div><div class="line"></div><div class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</div><div class="line">	ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line">	##</div><div class="line">	# Logging Settings</div><div class="line">	##</div><div class="line"></div><div class="line">	access_log /var/log/nginx/access.log;</div><div class="line">	error_log /var/log/nginx/error.log;</div><div class="line"></div><div class="line">	##</div><div class="line">	# Gzip Settings</div><div class="line">	##</div><div class="line"></div><div class="line">	gzip on;</div><div class="line">	gzip_disable &quot;msie6&quot;;</div><div class="line"></div><div class="line">	# gzip_vary on;</div><div class="line">	# gzip_proxied any;</div><div class="line">	# gzip_comp_level 6;</div><div class="line">	# gzip_buffers 16 8k;</div><div class="line">	# gzip_http_version 1.1;</div><div class="line">	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</div><div class="line"></div><div class="line">	##</div><div class="line">	# Virtual Host Configs</div><div class="line">	##</div><div class="line"></div><div class="line">	include /etc/nginx/conf.d/*.conf;</div><div class="line">	include /etc/nginx/sites-enabled/*;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#mail &#123;</div><div class="line">#	# See sample authentication script at:</div><div class="line">#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</div><div class="line"># </div><div class="line">#	# auth_http localhost/auth.php;</div><div class="line">#	# pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</div><div class="line">#	# imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</div><div class="line"># </div><div class="line">#	server &#123;</div><div class="line">#		listen     localhost:110;</div><div class="line">#		protocol   pop3;</div><div class="line">#		proxy      on;</div><div class="line">#	&#125;</div><div class="line"># </div><div class="line">#	server &#123;</div><div class="line">#		listen     localhost:143;</div><div class="line">#		protocol   imap;</div><div class="line">#		proxy      on;</div><div class="line">#	&#125;</div><div class="line">#&#125;</div></pre></td></tr></table></figure>
<p>其中设置了一些必要的参数，我们发现62行有这样的语句<font color="red" size="3">include /etc/nginx/sites-enabled/*</font>.可以看出/etc/nginx/sites-enabled/default文件也是一个核心的配置文件，其中包含了服务器跟目录、服务器名称、location信息和server信息等配置信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">##</div><div class="line"># You should look at the following URL&apos;s in order to grasp a solid understanding</div><div class="line"># of Nginx configuration files in order to fully unleash the power of Nginx.</div><div class="line"># http://wiki.nginx.org/Pitfalls</div><div class="line"># http://wiki.nginx.org/QuickStart</div><div class="line"># http://wiki.nginx.org/Configuration</div><div class="line">#</div><div class="line"># Generally, you will want to move this file somewhere, and start with a clean</div><div class="line"># file but keep this around for reference. Or just disable in sites-enabled.</div><div class="line">#</div><div class="line"># Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.</div><div class="line">##</div><div class="line"></div><div class="line"># Default server configuration</div><div class="line">#</div><div class="line">server &#123;</div><div class="line">	listen 80 default_server;</div><div class="line">	listen [::]:80 default_server;</div><div class="line"></div><div class="line">	# SSL configuration</div><div class="line">	#</div><div class="line">	# listen 443 ssl default_server;</div><div class="line">	# listen [::]:443 ssl default_server;</div><div class="line">	#</div><div class="line">	# Note: You should disable gzip for SSL traffic.</div><div class="line">	# See: https://bugs.debian.org/773332</div><div class="line">	#</div><div class="line">	# Read up on ssl_ciphers to ensure a secure configuration.</div><div class="line">	# See: https://bugs.debian.org/765782</div><div class="line">	#</div><div class="line">	# Self signed certs generated by the ssl-cert package</div><div class="line">	# Don&apos;t use them in a production server!</div><div class="line">	#</div><div class="line">	# include snippets/snakeoil.conf;</div><div class="line"></div><div class="line">	root /var/www/html;</div><div class="line"></div><div class="line">	# Add index.php to the list if you are using PHP</div><div class="line">	index index.html index.htm index.nginx-debian.html;</div><div class="line"></div><div class="line">	server_name _;</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">		# First attempt to serve request as file, then</div><div class="line">		# as directory, then fall back to displaying a 404.</div><div class="line">		try_files $uri $uri/ =404;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">	#</div><div class="line">	#location ~ \.php$ &#123;</div><div class="line">	#	include snippets/fastcgi-php.conf;</div><div class="line">	#</div><div class="line">	#	# With php7.0-cgi alone:</div><div class="line">	#	fastcgi_pass 127.0.0.1:9000;</div><div class="line">	#	# With php7.0-fpm:</div><div class="line">	#	fastcgi_pass unix:/run/php/php7.0-fpm.sock;</div><div class="line">	#&#125;</div><div class="line"></div><div class="line">	# deny access to .htaccess files, if Apache&apos;s document root</div><div class="line">	# concurs with nginx&apos;s one</div><div class="line">	#</div><div class="line">	#location ~ /\.ht &#123;</div><div class="line">	#	deny all;</div><div class="line">	#&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"># Virtual Host configuration for example.com</div><div class="line">#</div><div class="line"># You can move that to a different file under sites-available/ and symlink that</div><div class="line"># to sites-enabled/ to enable it.</div><div class="line">#</div><div class="line">#server &#123;</div><div class="line">#	listen 80;</div><div class="line">#	listen [::]:80;</div><div class="line">#</div><div class="line">#	server_name example.com;</div><div class="line">#</div><div class="line">#	root /var/www/example.com;</div><div class="line">#	index index.html;</div><div class="line">#</div><div class="line">#	location / &#123;</div><div class="line">#		try_files $uri $uri/ =404;</div><div class="line">#	&#125;</div><div class="line">#&#125;</div></pre></td></tr></table></figure>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="http://nginx.org/en/docs/" target="_blank" rel="external">nginx documentation</a><br><a href="http://www.cnblogs.com/languoliang/archive/2013/04/01/nginx.html" target="_blank" rel="external">Ubuntu中Nginx的安装与配置</a><br><a href="http://www.jb51.net/os/Ubuntu/64596.html" target="_blank" rel="external">Ubuntu下安装nginx的步骤分享</a></p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-08-20</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_011.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Tomcat部署Web项目</title>
    <link href="http://yoursite.com/2016/08/13/Ubuntu%E4%B8%8BTomcat%E9%83%A8%E7%BD%B2Web%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2016/08/13/Ubuntu下Tomcat部署Web项目/</id>
    <published>2016-08-13T05:06:57.000Z</published>
    <updated>2017-07-15T13:08:06.217Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_010.png" alt=""><br><a id="more"></a></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统 ：ubuntu-16.04（64）<br>JDK      ：1.8.0_101<br>Tomcat   ：9.0.0.M9</p>
<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Tomcat官方网站下载<a href="http://tomcat.apache.org/download-90.cgi" target="_blank" rel="external">地址</a>，在Ubuntu操作系统上，我们下载zip和tar.gz类型的安装包。<br><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_016.png" alt="官网下载目录"></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>将下载到Downloads目录下的 tar.gz文件解压至 /opt目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tar zxvf apache-tomcat-9.0.0.M9.tar.gz  -C /opt</div></pre></td></tr></table></figure>
<p>为了方便配置，进入/opt目录给文件夹改名（非必须）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv apache-tomcat-9.0.0.M9 tomcat9.0</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>进入/opt/tomcat9.0目录，打开启动的脚本文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /opt/tomcat9.0</div><div class="line">sudo gedit./bin/startup.sh</div></pre></td></tr></table></figure>
<p>打开startup.sh文件后，添加配置信息（注意替换路径）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=/usr/java/jdk1.8</div><div class="line">JRE_HOME=$JAVA_HOME/jre</div><div class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME</div><div class="line">CLASSPATH=.:$JRE_HOME/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line">TOMCAT_HOME=/opt/tomcat9.0</div></pre></td></tr></table></figure>
<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>进入/opt/tomcat9.0目录，启动Tomcat</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/startup.sh</div></pre></td></tr></table></figure>
<p>输出：<br>Using CATALINA_BASE:   /opt/tomcat9.0<br>Using CATALINA_HOME:   /opt/tomcat9.0<br>Using CATALINA_TMPDIR: /opt/tomcat9.0/temp<br>Using JRE_HOME:        /usr/java/jdk1.8<br>Using CLASSPATH:       /opt/tomcat9.0/bin/bootstrap.jar:/opt/tomcat9.0/bin/tomcat-juli.jar<br>Tomcat started.</p>
<p>验证tomcat配置和安装是否成功<br>在浏览器中输入：<a href="http://localhost:8080/，并访问该网址" target="_blank" rel="external">http://localhost:8080/，并访问该网址</a><br><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_017.png" alt="success page"><br>如果出现以上页面，则说明配置成功。</p>
<p>关闭Tomcat</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/shutdown.sh</div></pre></td></tr></table></figure>
<p>输出：<br>Using CATALINA_BASE:   /opt/tomcat9.0<br>Using CATALINA_HOME:   /opt/tomcat9.0<br>Using CATALINA_TMPDIR: /opt/tomcat9.0/temp<br>Using JRE_HOME:        /usr/java/jdk1.8<br>Using CLASSPATH:       /opt/tomcat9.0/bin/bootstrap.jar:/opt/tomcat9.0/bin/tomcat-juli.jar</p>
<p>此时再次访问<a href="http://localhost:8080/页面就会出现" target="_blank" rel="external">http://localhost:8080/页面就会出现</a> <font color="red">Unable to connect</font>的提示，说明Tomcat被正确关闭。</p>
<h2 id="IDE导出War包"><a href="#IDE导出War包" class="headerlink" title="IDE导出War包"></a>IDE导出War包</h2><p>暂无</p>
<p>这是我之前导出的一个<strong><a href="http://octlz2jco.bkt.clouddn.com/download_file_001_springmvc.war" target="_blank" rel="external">war包</a></strong></p>
<h2 id="部署Web项目"><a href="#部署Web项目" class="headerlink" title="部署Web项目"></a>部署Web项目</h2><p>Tomcat部署Java Web项目有多种方式，此处我们选择war包部署。</p>
<h3 id="war"><a href="#war" class="headerlink" title="war"></a>war</h3><p>我们将导出的web项目war包拷贝到webapps目录中</p>
<p>位置 ： /opt/tomcat9.0/webapps/springmvc/springmvc.war</p>
<h3 id="Tomcat-1"><a href="#Tomcat-1" class="headerlink" title="Tomcat"></a>Tomcat</h3><blockquote>
<p>sudo chmod -R 777 fileName 修改文件夹权限</p>
</blockquote>
<p>进入/opt/tomcat9.0/conf目录，打开server.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /opt/tomcat9.0/conf</div><div class="line">sudo subl server.xml</div></pre></td></tr></table></figure>
<blockquote>
<p>因为不经常使用Linux操作系统，更不太喜欢vi等编辑器，所以我在Ubuntu下安装了sublime text3</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps/springmvc"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/springmvc"</span>  <span class="attr">docBase</span>=<span class="string">"springmvc.war"</span>/&gt;</span>    </div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- SingleSignOn valve, share authentication between web applications</span></div><div class="line">         Documentation at: /docs/config/valve.html --&gt;</div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">    &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;</div><div class="line">    --&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Access log processes all example.</span></div><div class="line">         Documentation at: /docs/config/valve.html</div><div class="line">         <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line">           <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></div><div class="line">           <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div></pre></td></tr></table></figure>
<p>appBase代表应用的基础目录，原始默认位置为“webapps”即对应于tomcat根目录下的文件夹webapps；<br>docBase相当于指定的虚拟目录对应的应用程序的绝对路径,是web应用和本地路径;<br>path是tomcat访问这个应用的URL路径。<br>workDir是运行编译成为java二进制代码时候存放的目录。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>完成配置并保存好server.xml之后，启动Tomcat</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./bin/startup.sh</div></pre></td></tr></table></figure>
<p>在浏览器中输入web项目的访问路径 localhost:8080/springmvc/test</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_018.png" alt="成功页面"></p>
<p>如果出现以上的页面说明部署成功。</p>
<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>由于对server.xml文件中的appBase、path以及访问路径还有一些困惑又做了一点实验:</p>
<h4 id="当我如上面的配置启动Tomcat时，webapps-springmvc的目录下的springmvc-war被解压"><a href="#当我如上面的配置启动Tomcat时，webapps-springmvc的目录下的springmvc-war被解压" class="headerlink" title="当我如上面的配置启动Tomcat时，webapps/springmvc的目录下的springmvc.war被解压"></a>当我如上面的配置启动Tomcat时，webapps/springmvc的目录下的springmvc.war被解压</h4><p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_019.png" alt=""></p>
<h4 id="我尝试修改appBase的内容，进行测试"><a href="#我尝试修改appBase的内容，进行测试" class="headerlink" title="我尝试修改appBase的内容，进行测试"></a>我尝试修改appBase的内容，进行测试</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps/springmvc111"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/springmvc"</span>  <span class="attr">docBase</span>=<span class="string">"springmvc.war"</span>/&gt;</span>    </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line">           <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></div><div class="line">           <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div></pre></td></tr></table></figure>
<p>启动Tomcat之后，发现webapps下新生成了一个名为springmvc111的空文件夹</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_020.png" alt=""></p>
<p>此时在访问localhost:8080/springmvc/test会提示<font color="red">Unable to connect</font>,并且在关闭Tomcat的时候会提示如下信息</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_021.png" alt=""></p>
<h4 id="我再次尝试修改path的内容，进行测试"><a href="#我再次尝试修改path的内容，进行测试" class="headerlink" title="我再次尝试修改path的内容，进行测试"></a>我再次尝试修改path的内容，进行测试</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps/springmvc"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/springmvc111"</span>  <span class="attr">docBase</span>=<span class="string">"springmvc.war"</span>/&gt;</span>    </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line">           <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></div><div class="line">           <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div></pre></td></tr></table></figure>
<p>再次启动Tomcat，webapps/springmvc的目录下的springmvc.war被解压到springmvc111目录中</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_022.png" alt=""></p>
<p>此时访问localhost:8080/springmvc/test，页面显示正常。</p>
<h4 id="因为我的war包对应的web项目丢失了，而且之后重新做了一个在导出war包这个过程总是会出问题，所以后续的一些测试暂时就不做了。"><a href="#因为我的war包对应的web项目丢失了，而且之后重新做了一个在导出war包这个过程总是会出问题，所以后续的一些测试暂时就不做了。" class="headerlink" title="因为我的war包对应的web项目丢失了，而且之后重新做了一个在导出war包这个过程总是会出问题，所以后续的一些测试暂时就不做了。"></a><font color="red">因为我的war包对应的web项目丢失了，而且之后重新做了一个在导出war包这个过程总是会出问题，所以后续的一些测试暂时就不做了。</font></h4><h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-08-13</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_010.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16安装JDK1.8</title>
    <link href="http://yoursite.com/2016/08/06/Ubuntu16%E5%AE%89%E8%A3%85JDK1-8/"/>
    <id>http://yoursite.com/2016/08/06/Ubuntu16安装JDK1-8/</id>
    <published>2016-08-06T05:06:16.000Z</published>
    <updated>2017-07-15T05:34:10.293Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_009.png" alt=""><br><a id="more"></a></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>系统 ： ubuntu-16.04（64）</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载之前可通过命令行查看操作系统位数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getconf LONG_BIT</div></pre></td></tr></table></figure>
<p>下载对应的<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">JDK文件</a></p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_015.png" alt="截图"></p>
<p>我选择的是jdk-8u101-linux-x64.tar.gz</p>
<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>创建目录作为JDK的安装目录，这里选择安装位置为:/usr/java/</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /usr/java</div></pre></td></tr></table></figure>
<p>将下载到Downloads文件夹中的JDK文件解压到 /usr/java 目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd Downloads/</div><div class="line">sudo tar zxvf jdk-8u101-linux-x64.tar.gz -C /usr/java</div></pre></td></tr></table></figure>
<p>为了配置环境变量方便，进入/usr/java 目录下给文件夹改名（非必须）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv jdk1.8.0_101 jdk1.8</div></pre></td></tr></table></figure>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="配置环境-1"><a href="#配置环境-1" class="headerlink" title="配置环境"></a>配置环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/environment</div></pre></td></tr></table></figure>
<p>将内容替换为下面的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games$JAVA_HOME/bin&quot;</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</div><div class="line">export JAVA_HOME=/usr/java/jdk1.8</div></pre></td></tr></table></figure>
<p>修改完成后保存并关闭，输入以下命令使环境变量生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/environment</div></pre></td></tr></table></figure>
<h3 id="检查配置成果"><a href="#检查配置成果" class="headerlink" title="检查配置成果"></a>检查配置成果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $JAVA_HOME</div></pre></td></tr></table></figure>
<p>输出：/usr/java/jdk1.8</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $CLASSPATH</div></pre></td></tr></table></figure>
<p>输出：.:/usr/java/jdk1.8/lib:/usr/java/jdk1.8/jre/lib:.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure>
<p>输出：<br>/usr/java/jdk1.8/bin:/usr/java/jdk1.8/jre/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:<br>/bin:/usr/games:/usr/local/games$JAVA_HOME/bin:/snap/bin</p>
<h3 id="查看安装版本"><a href="#查看安装版本" class="headerlink" title="查看安装版本"></a>查看安装版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure>
<p>输出：<br>java version “1.8.0_101”<br>Java(TM) SE Runtime Environment (build 1.8.0_101-b13)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)</p>
<blockquote>
<font color="blue">如果没有起效可尝试重启，毕竟重启治百病 </font>

</blockquote>
<h3 id="配置所有用户的环境变量，不然重启之后依然找不到Java命令"><a href="#配置所有用户的环境变量，不然重启之后依然找不到Java命令" class="headerlink" title="配置所有用户的环境变量，不然重启之后依然找不到Java命令"></a>配置所有用户的环境变量，不然重启之后依然找不到Java命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/profile</div></pre></td></tr></table></figure>
<p>在尾部添加一下内容即可（注意替换路径）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#set Java environment</div><div class="line">JAVA_HOME=/usr/java/jdk1.8</div><div class="line">export JRE_HOME=/usr/java/jdk1.8/jre</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</div><div class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</div></pre></td></tr></table></figure>
<h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="http://www.linuxidc.com/Linux/2015-09/122689.htm" target="_blank" rel="external">Ubuntu 15.04 安装JDK并配置成为默认的JDK</a></p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-08-06</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_009.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="JDK1.8" scheme="http://yoursite.com/tags/JDK1-8/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统安装使用Sublime Text3</title>
    <link href="http://yoursite.com/2016/08/06/Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Sublime-Text3/"/>
    <id>http://yoursite.com/2016/08/06/Ubuntu系统安装使用Sublime-Text3/</id>
    <published>2016-08-06T05:00:00.000Z</published>
    <updated>2017-07-22T02:12:09.059Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_016.png" alt=""><br><a id="more"></a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>Ubuntu 16.04</li>
<li>Sublime Text 3</li>
</ul>
<h2 id="Sublime-Text-3安装步骤"><a href="#Sublime-Text-3安装步骤" class="headerlink" title="Sublime Text 3安装步骤"></a>Sublime Text 3安装步骤</h2><h3 id="添加Sublime-Text-3软件包的软件源"><a href="#添加Sublime-Text-3软件包的软件源" class="headerlink" title="添加Sublime Text 3软件包的软件源"></a>添加Sublime Text 3软件包的软件源</h3><pre><code>sudo add-apt-repository ppa:webupd8team/sublime-text-3
</code></pre><p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_037.png" alt=""></p>
<h3 id="使用以下命令更新系统软件源"><a href="#使用以下命令更新系统软件源" class="headerlink" title="使用以下命令更新系统软件源"></a>使用以下命令更新系统软件源</h3><pre><code>sudo apt-get update
</code></pre><p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_038.png" alt=""></p>
<h3 id="使用以下命令安装Sublime-Text-3"><a href="#使用以下命令安装Sublime-Text-3" class="headerlink" title="使用以下命令安装Sublime Text 3"></a>使用以下命令安装Sublime Text 3</h3><pre><code>sudo apt-get install sublime-text-installer
</code></pre><p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_039.png" alt=""></p>
<p>等待Sublime安装成功，就可以通过subl命令调用了。</p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-08-06</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_016.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="Sublime Text3" scheme="http://yoursite.com/tags/Sublime-Text3/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA创建Maven多模块项目</title>
    <link href="http://yoursite.com/2016/07/23/IntelliJ-IDEA%E5%88%9B%E5%BB%BAMaven%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2016/07/23/IntelliJ-IDEA创建Maven多模块项目/</id>
    <published>2016-07-23T13:09:48.000Z</published>
    <updated>2017-07-24T13:14:25.346Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_019.jpg" alt="https://elendil.tuchong.com/15009989/"><br><a id="more"></a></p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>首先放上一张项目构建完之后的图</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_044.png" alt=""></p>
<p>通过上图可知，父项目（ShzThink）聚合很多子项目（common-utils、common-dao、common-service、think-web、think-crm）。这些模块的依赖关系如下：<br>common-dao           –&gt;   common-utils<br>common-service      –&gt;   common-dao<br>think-web                –&gt;   common-service<br>think-crm                –&gt;   common-service        </p>
<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><h3 id="Parent-Project"><a href="#Parent-Project" class="headerlink" title="Parent Project"></a>Parent Project</h3><p>新建一个空白标准maven project（不要选择Create from archetype选项）</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_045.png" alt=""></p>
<p>得到一个标准的maven项目，因为该项目是作为一个Parent project存在的，可以直接删除src文件夹。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_046.png" alt=""></p>
<h3 id="增加common-模块"><a href="#增加common-模块" class="headerlink" title="增加common-*模块"></a>增加common-*模块</h3><p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_047.png" alt=""></p>
<p>选中父模块之后，依次New-&gt;Module,会出现下面窗口，勾选Create from archetype，选择maven-archetype-quickstart选项。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_048.png" alt=""></p>
<p>以此方法依次创建common-utils、common-dao、common-service子模块。</p>
<h3 id="增加think-模块"><a href="#增加think-模块" class="headerlink" title="增加think-*模块"></a>增加think-*模块</h3><p>与2.2中相似，只不过因为think-*是我们最终要部署的应用，因此在创建模块的时候选择maven-archetype-webapp选项。</p>
<h2 id="添加项目依赖"><a href="#添加项目依赖" class="headerlink" title="添加项目依赖"></a>添加项目依赖</h2><p>以common-dao模块为例，在添加依赖之前，我们可以看到它的pom文件是这样的：</p>
<pre><code class="xml">
<span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> 
         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>
    <span class="tag">&lt;<span class="name">parent</span>&gt;</span>
        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shz-think-backend<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shzthink.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>
    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>

    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common-dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>

    <span class="tag">&lt;<span class="name">name</span>&gt;</span>common-dao<span class="tag">&lt;/<span class="name">name</span>&gt;</span>
    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span>

    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>
        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>

    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>
        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>
            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>
        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>
<span class="tag">&lt;/<span class="name">project</span>&gt;</span>
</code></pre>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_049.png" alt=""></p>
<p>选择common-dao子模块，右键-&gt;Open Module Settings,出现如下窗口，选择common-utils。</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_050.png" alt=""></p>
<p>此时再查看common-dao子模块的pom文件会发现在 &lt; dependencies&gt;下增加了一段代码：</p>
<pre><code class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shzthink.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common-utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>
<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>
</code></pre>
<p>依照上述方法依次给common-service、think-web、think-crm添加依赖。此时就完成了多模块Maven项目的创建。</p>
<h2 id="Build项目"><a href="#Build项目" class="headerlink" title="Build项目"></a>Build项目</h2><p>在ShzThink父项目的根目录中运行mvn clean install，输出的末尾大概会是这样的</p>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_051.png" alt=""></p>
<p>注意Reactor Summary，整个项目根据我们希望的顺序进行build。Maven根据我们的依赖配置，智能的安排了顺序。</p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="http://blog.csdn.net/zhanghongzheng3213/article/details/52415827?locationNum=10" target="_blank" rel="external"><font color="#87CEFA">Maven最佳实践 划分模块 配置多模块项目 pom modules</font></a></p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-07-23</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_019.jpg&quot; alt=&quot;https://elendil.tuchong.com/15009989/&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="IntelliJ IDEA" scheme="http://yoursite.com/tags/IntelliJ-IDEA/"/>
    
      <category term="Maven" scheme="http://yoursite.com/tags/Maven/"/>
    
      <category term="多模块" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>[Spring MVC菜鸟之旅] Spring MVC 与 MyBatis整合</title>
    <link href="http://yoursite.com/2016/07/16/Spring-MVC%E8%8F%9C%E9%B8%9F%E4%B9%8B%E6%97%85-Spring-MVC-%E4%B8%8E-MyBatis%E6%95%B4%E5%90%88/"/>
    <id>http://yoursite.com/2016/07/16/Spring-MVC菜鸟之旅-Spring-MVC-与-MyBatis整合/</id>
    <published>2016-07-15T16:02:14.000Z</published>
    <updated>2017-07-15T03:25:36.204Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_008.webp" alt="https://tuchong.com/1453100/13582509/"><br><a id="more"></a></p>
<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。 使用这个类库中的类, Spring 将会加载必要的 MyBatis 工厂类和 session 类。 这个类库也提供一个简单的方式来注入 MyBatis 数据映射器和 SqlSession 到业务层的 bean 中。 而且它也会处理事务, 翻译 MyBatis 的异常到 Spring 的 DataAccessException 异常中。最终,它并 不会依赖于 MyBatis,Spring 或 MyBatis-Spring 来构建应用程序代码。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>要使用MyBatis，并且使用Maven来构建项目，则只需将下面的dependency代码置于pom.xml文件中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>要和Spring一起使用MyBatis，我们需要在SPring应用上下文中定义至少两样东西：一个SqlSessionFactory 和至少一个数据映射器类。</p>
<h3 id="从XML中构建SqlSessionFactory"><a href="#从XML中构建SqlSessionFactory" class="headerlink" title="从XML中构建SqlSessionFactory"></a>从XML中构建SqlSessionFactory</h3><p>在 MyBatis-Spring中,SqlSessionFactoryBean 是用于创建SqlSessionFactory的。要配置这个工厂bean,放置下面的代码在 Spring的XML配置文件中:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>要注意SqlSessionFactoryBean需要一个DataSource（数据源）。这可以是任意的DataSource，配置它就像配置其他的Spring数据库连接是一样的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="创建数据映射器类"><a href="#创建数据映射器类" class="headerlink" title="创建数据映射器类"></a>创建数据映射器类</h3><p>我们创建的数据映射器类如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestMapper</span> </span>&#123;</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * From auth_user WHERE id = #&#123;id&#125;"</span>)</div><div class="line">    <span class="function">Test <span class="title">getTest</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后用MapperFactoryBean将给接口加入到Spring中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"com.springmvc.niklaus.dao.TestMapper"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p><font color="red">注意</font>所指定的映射器类必须是一个接口而不是具体的实现类。在这个实例中，注解被用来指定SQL语句，但是MyBatis的映射器XML文件也可以用，这个我将在下面再讲。</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>一个使用MyBatis-Spring的主要原因是它允许MyBatis参与到Spring的事务管理中，而不是给MyBatis创建一个新的特定的事务管理器。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>要开始Spring的事务管理，要在Spring的XML配置文件中创建一个DataSourceTransactionManager对象，然后使用<tx:annotation-driven>指定transactionManager作为事务管理器，支持事务注解（@Transactional），此时在需要事务管理的Service上使用@Transactional注解就可以了，<tx:annoation-driven>只会查找和它在相同的应用上下文件中定义的bean上面的@Transactional注解。</tx:annoation-driven></tx:annotation-driven></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title">TestService</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TestMapper testMapper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Test <span class="title">getTestById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> testMapper.getTest(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>先附上完整的MyBatis的配置XML文件spring-db.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"com.springmvc.niklaus.dao.TestMapper"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样，一个满足基本增删改查的Spring与MyBatis的整合应用就完成了，如果你想查看完整的项目代码，可以<a href="https://github.com/tianqing370687/SpringMVCRookie/tree/dev-mybatis" target="_blank" rel="external">点击链接(SpringMVCRookie-dev-mybatis)</a></p>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="external"><font color="#87CEFA">mybatis</font></a><br><a href="http://www.mybatis.org/spring/zh/index.html" target="_blank" rel="external"><font color="#87CEFA">mybatis-spring</font></a></p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-07-16</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octlz2jco.bkt.clouddn.com/blog_thumbnails_000_000_008.webp&quot; alt=&quot;https://tuchong.com/1453100/13582509/&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Spring MVC菜鸟之旅" scheme="http://yoursite.com/categories/Spring-MVC%E8%8F%9C%E9%B8%9F%E4%B9%8B%E6%97%85/"/>
    
    
  </entry>
  
  <entry>
    <title>[Spring MVC菜鸟之旅] Spring Data Redis整合</title>
    <link href="http://yoursite.com/2016/07/09/Spring-MVC%E8%8F%9C%E9%B8%9F%E4%B9%8B%E6%97%85-Spring-Data-Redis%E6%95%B4%E5%90%88/"/>
    <id>http://yoursite.com/2016/07/09/Spring-MVC菜鸟之旅-Spring-Data-Redis整合/</id>
    <published>2016-07-08T16:01:16.000Z</published>
    <updated>2017-07-15T03:24:01.862Z</updated>
    
    <content type="html"><![CDATA[<p>The Spring Framework is the leading full-stack Java/JEE application framework. It provides a lightweight container and a non-invasive programming model enabled by the use of dependency injection, AOP, and portable service abstractions.<br>NoSQL storages provide an alternative to classical RDBMS for horizontal scalability and speed. In terms of implementation, Key Value stores represent one of the largest (and oldest) members in the NoSQL space.<br>The Spring Data Redis (or SDR) framework makes it easy to write Spring applications that use the Redis key value store by eliminating the redundant tasks and boiler plate code required for interacting with the store through Spring’s excellent infrastructure support.<br><a id="more"></a></p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="使用Redis"><a href="#使用Redis" class="headerlink" title="使用Redis"></a>使用Redis</h3><blockquote>
<p>此处简单介绍一下Linux下得Redis安装，windows比较麻烦没有尝试</p>
</blockquote>
<h4 id="下载、解压并编译Redis文件"><a href="#下载、解压并编译Redis文件" class="headerlink" title="下载、解压并编译Redis文件"></a>下载、解压并编译Redis文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget http://download.redis.io/releases/redis-3.2.4.tar.gz</div><div class="line">$ tar xzf redis-3.2.4.tar.gz</div><div class="line">$ cd redis-3.2.4</div><div class="line">$ make</div></pre></td></tr></table></figure>
<h4 id="运行redis-server"><a href="#运行redis-server" class="headerlink" title="运行redis-server"></a>运行redis-server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ./src/redis-server</div></pre></td></tr></table></figure>
<p><img src="http://octlz2jco.bkt.clouddn.com/blog_content_000_000_014.png" alt=""></p>
<h4 id="启动Redis客户端"><a href="#启动Redis客户端" class="headerlink" title="启动Redis客户端"></a>启动Redis客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ./src/redis-cli</div></pre></td></tr></table></figure>
<h3 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h3><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>
<h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><p>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set name &quot;runoob&quot;</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get name</div><div class="line">&quot;runoob&quot;</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure>
<h4 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h4><p>Redis hash 是一个键值对集合。<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hmset user:1 username runoob password runoob points 200</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; hgetall user:1</div><div class="line">1) &quot;username&quot;</div><div class="line">2) &quot;runoob&quot;</div><div class="line">3) &quot;password&quot;</div><div class="line">4) &quot;runoob&quot;</div><div class="line">5) &quot;points&quot;</div><div class="line">6) &quot;200&quot;</div></pre></td></tr></table></figure>
<p>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis HMSET, HGETALL 命令，user:1 为键值。<br>每个 hash 可以存储 2<sup>32</sup> -1 键值对（40多亿）。</p>
<h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lpush runoob redis</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; lpush runoob mongodb</div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt; lpush runoob rabitmq</div><div class="line">(integer) 3</div><div class="line">127.0.0.1:6379&gt; lrange runoob 0 10</div><div class="line">1) &quot;rabitmq&quot;</div><div class="line">2) &quot;mongodb&quot;</div><div class="line">3) &quot;redis&quot;</div></pre></td></tr></table></figure>
<p>列表最多可存储 2<sup>32</sup> - 1 元素 (4294967295, 每个列表可存储40多亿)。</p>
<h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><p>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>
<h5 id="sadd命令"><a href="#sadd命令" class="headerlink" title="sadd命令"></a>sadd命令</h5><p>添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sadd key member</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; sadd runoobs redis</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; sadd runoobs mongodb</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; sadd runoobs rabitmq</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; sadd runoobs rabitmq</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:6379&gt; smembers runoobs</div><div class="line">1) &quot;rabitmq&quot;</div><div class="line">2) &quot;mongodb&quot;</div><div class="line">3) &quot;redis&quot;</div></pre></td></tr></table></figure>
<p>注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。<br>集合中最大的成员数为 2<sup>32</sup> - 1(4294967295, 每个集合可存储40多亿个成员)。</p>
<h4 id="zset-sorted-set-有序集合"><a href="#zset-sorted-set-有序集合" class="headerlink" title="zset(sorted set : 有序集合)"></a>zset(sorted set : 有序集合)</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。</p>
<h5 id="zadd命令"><a href="#zadd命令" class="headerlink" title="zadd命令"></a>zadd命令</h5><p>添加元素到集合，元素在集合中存在则更新对应score</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zadd key score member</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zadd runoobz 0 redis</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; zadd runoobz 0 mongodb</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; zadd runoobz 0 rabitmaq</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; zadd runoobz 0 rabitmaq</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:6379&gt; zrangebyscore runoobz 0 10</div><div class="line">1) &quot;mongodb&quot;</div><div class="line">2) &quot;rabitmaq&quot;</div><div class="line">3) &quot;redis&quot;</div></pre></td></tr></table></figure>
<h2 id="整合Spring-Data-Redis"><a href="#整合Spring-Data-Redis" class="headerlink" title="整合Spring Data Redis"></a>整合Spring Data Redis</h2><p>Spring Redis要求Redis的版本不低于2.6，Java SE版本不低于6.0，在语言绑定（连接器）方面，Spring Redis集成了Jedis，JRedis，SRP和Lettuce四个流行的Redis方面的Java库。</p>
<h3 id="添加相关文件"><a href="#添加相关文件" class="headerlink" title="添加相关文件"></a>添加相关文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="配置RedisConnectionFactory"><a href="#配置RedisConnectionFactory" class="headerlink" title="配置RedisConnectionFactory"></a>配置RedisConnectionFactory</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"poolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxIdle&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxTotal&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxWaitMillis&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Jedis ConnectionFactory --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.hostname&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.port&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.timeout&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usePool"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"poolConfig"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="通过RedisTemplate使用对象"><a href="#通过RedisTemplate使用对象" class="headerlink" title="通过RedisTemplate使用对象"></a>通过RedisTemplate使用对象</h3><p>Most users are likely to use RedisTemplate and its coresponding package org.springframework.data.redis.core - the template is in fact the central class of the Redis module due to its rich feature set. The template offers a high-level abstraction for Redis interactions. While RedisConnection offers low level methods that accept and return binary values (byte arrays), the template takes care of serialization and connection management, freeing the user from dealing with such details.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Serializer --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 如果不配置Serializer，那么存储的时候只能使用String，如果存储其他类型的对象，将会提示错误--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keySerializer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"valueSerializer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- redis template definition --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span> <span class="attr">ref</span>=<span class="string">"keySerializer"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span> <span class="attr">ref</span>=<span class="string">"valueSerializer"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>RedisTemplate uses a Java-based serializer for most of its operations. This means that any object written or read by the template will be serialized/deserialized through Java. The serialization mechanism can be easily changed on the template, and the Redis module offers several implementations available in the org.springframework.data.redis.serializer package - see Serializers for more information. You can also set any of the serializers to null and use RedisTemplate with raw byte arrays by setting the enableDefaultSerializer property to false. Note that the template requires all keys to be non-null - values can be null as long as the underlying serializer accepts them; read the javadoc of each serializer for more information.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.springmvc.niklaus.dao.Impl;</div><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDAOImpl</span> <span class="keyword">implements</span> <span class="title">TestDAO</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rSave</span><span class="params">(String key,String value)</span></span>&#123;</div><div class="line">        redisTemplate.opsForValue().set(key,value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rGet</span><span class="params">(String key)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h2><p><a href="http://redis.io/" target="_blank" rel="external"><font color="#87CEFA">Redis</font></a><br><a href="http://docs.spring.io/spring-data/redis/docs/current/reference/html/" target="_blank" rel="external"><font color="#87CEFA">Spring Data Redis</font></a><br><a href="http://docs.spring.io/spring-data/redis/docs/current/api/org/springframework/data/redis/core/RedisTemplate.html" target="_blank" rel="external"><font color="#87CEFA">Spring Data Redis - API</font></a><br><a href="http://projects.spring.io/spring-data-redis/" target="_blank" rel="external"><font color="#87CEFA">Spring Data Redis - Projects</font></a></p>
<h2 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h2><p>发布时间 ： 2016-07-09</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Spring Framework is the leading full-stack Java/JEE application framework. It provides a lightweight container and a non-invasive programming model enabled by the use of dependency injection, AOP, and portable service abstractions.&lt;br&gt;NoSQL storages provide an alternative to classical RDBMS for horizontal scalability and speed. In terms of implementation, Key Value stores represent one of the largest (and oldest) members in the NoSQL space.&lt;br&gt;The Spring Data Redis (or SDR) framework makes it easy to write Spring applications that use the Redis key value store by eliminating the redundant tasks and boiler plate code required for interacting with the store through Spring’s excellent infrastructure support.&lt;br&gt;
    
    </summary>
    
      <category term="Spring MVC菜鸟之旅" scheme="http://yoursite.com/categories/Spring-MVC%E8%8F%9C%E9%B8%9F%E4%B9%8B%E6%97%85/"/>
    
    
  </entry>
  
</feed>
